library(tidytext)
library(janitor)
library(vdemdata)
`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())
show_col(viridis_pal(option = "cividis")(8))
country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia",
"China", "Fiji", "Hong Kong", "India", "Indonesia",
"Iran", "North Korea", "South Korea", "Laos",
"Malaysia", "Maldives", "Mongolia", "Myanmar",
"Nepal", "Pakistan", "Papua New Guinea", "Philippines",
"Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste",
"Vanuatu", "Vietnam")
world_shape <- st_read(here("data",
"world-administrative-boundaries",
"world-administrative-boundaries.shp"),
quiet = TRUE)
population_estimates <- read_csv(here("data", "population_estimates.csv")) |>
mutate(country_iso = countrycode(country,
origin = "country.name",
destination = "iso3c"))
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
hri <- read_excel(here("data", "human_rights_index.xlsx")) |> clean_names()
hri_long_filtered <- hri |>
rename(recommending_body = reccomending_body) %>%
mutate_at(vars(countries_concerned,
recommending_body,
recommending_regions,
regions_concerned,
themes,
affected_persons,
sdgs,
type),
~ str_replace_all(., "\\- ", "")) |>
separate(countries_concerned, sep = "\r\n",
remove = TRUE,
into = paste0("country", 1:20)) |>
pivot_longer(cols = country1:country20,
names_to = "ignore1",
values_to = "country") |>
filter(!is.na(country)) |>
mutate(country = case_when(
country == "Democratic People's Republic of Korea" ~ "North Korea",
country == "Iran (Islamic Republic of)" ~ "Iran",
country == "Lao People's Democratic Republic" ~ "Laos",
country == "Republic of Korea" ~ "South Korea",
country == "Viet Nam" ~ "Vietnam",
TRUE ~ country
)) |>
filter(country %in% country_list) |>
separate(themes, sep = "\r\n",
remove = TRUE,
into = paste0("theme", 1:36)) |>
pivot_longer(cols = theme1:theme36,
names_to = "ignore2",
values_to = "theme") |>
filter(!is.na(theme)) |>
separate(affected_persons, sep = "\r\n",
remove = TRUE,
into = paste0("affected_persons", 1:18)) |>
pivot_longer(cols = affected_persons1:affected_persons18,
names_to = "ignore3",
values_to = "persons_affected") |>
filter(!is.na(persons_affected))  |>
separate(sdgs, sep = "\r\n",
remove = TRUE,
into = paste0("sdgs", 1:37)) |>
pivot_longer(cols = sdgs1:sdgs37,
names_to = "ignore4",
values_to = "sdg") |>
filter(!is.na(sdg)) |>
distinct(ohchr_annotation_id,
type,
sdg,
country,
theme,
persons_affected)
annotation_id_list <- hri_long_filtered |>
pull(ohchr_annotation_id)
hri_filtered <- hri |>
filter(ohchr_annotation_id %in% annotation_id_list)
hri_long_filtered |>
write_csv(here("data", "hri_long_filtered.csv"))
hri_filtered |>
write_csv(here("data", "hri_filtered.csv"))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 9.5)
library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(countrycode)
library(viridis)
library(ggraph)
library(ggforce)
library(plotly)
library(widyr)
library(tidytext)
library(janitor)
library(ggiraph)
`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())
show_col(viridis_pal(option = "cividis")(8))
country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia",
"China", "Fiji", "Hong Kong", "India", "Indonesia",
"Iran", "North Korea", "South Korea", "Laos",
"Malaysia", "Maldives", "Mongolia", "Myanmar",
"Nepal", "Pakistan", "Papua New Guinea", "Philippines",
"Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste",
"Vanuatu", "Vietnam")
world_shape <- st_read(here("data",
"world-administrative-boundaries",
"world-administrative-boundaries.shp"),
quiet = TRUE)
population_estimates <- read_csv(here("data", "population_estimates.csv")) |>
mutate(country_iso = countrycode(country,
origin = "country.name",
destination = "iso3c"))
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
websites <- tribble(
~ref, ~url,
"economic_stability_barchart", "<iframe src='https://risk-anticipation-hub.github.io/crisis_risk_dashboard/interactive_plots.html#htmlwidget-ce5e08db6fad6f468036' style =  'width:100%;height:100vh;'></iframe?>",
"migration_barchart",
"<iframe src='https://risk-anticipation-hub.github.io/crisis_risk_dashboard/interactive_plots.html#htmlwidget-b187a3b213c2b014f28a' style =  'width:100%;height:100vh;'></iframe?>",
"economic_stability_alternative", "<iframe src='https://risk-anticipation-hub.github.io/crisis_risk_dashboard/interactive_plots.html#economic-stability' style =  'width:100%;height:100vh;'></iframe?>"
)
websites |> write_csv(here("data", "websites.csv"))
econ_stab <- read_csv(here("data", "economic_stability_data.csv"))
# Correcting the wrong GDP per capita values
gdp <- read_csv(here("data", "gdp_per_capita.csv")) |>
clean_names() |>
filter(!is.na(country_code)) |>
mutate(country_name =
case_when(
str_detect(country_name, "Iran") ~ "Iran",
str_detect(country_name, "Micronesia") ~ "Micronesia",
country_name == "Viet Nam" ~ "Vietnam",
TRUE ~ country_name
))
economic_stability <- econ_stab |>
filter(Indicator_SubType != "GDP per capita, PPP (constant 2017 international $)") |>
rbind(gdp |>
pivot_longer(cols = c(x2012_yr2012:x2023_yr2023),
names_to = "Year",
values_to = "Value") |>
mutate(Year = str_sub(Year, start = 2, end = 5),
Indicator_SubType = "GDP per capita (constant 2015 US$)") |>
select(Country_Name_Short = country_name,
Indicator_SubType,
Year,
Value)  |>
mutate(Value = parse_number(Value),
Year = parse_double(Year)) |>
filter(!is.na(Value))) |>
group_by(Country_Name_Short, Indicator_SubType) |>
mutate(rescaled_value = range_wna(Value)) |>
ungroup() %>%
mutate(indicator_label =
case_when(
str_detect(Indicator_SubType, "Consumer price index") ~ "Consumer price index",
Indicator_SubType == "GDP per capita (constant 2015 US$)" ~ "GDP per capita",
str_detect(Indicator_SubType, "Total debt service") ~ "Total debt service",
str_detect(Indicator_SubType, "Inflation") ~ "Inflation annual",
TRUE ~ Indicator_SubType
),
Value = case_when(Value <= 100 ~ round(Value, digits = 2),
Value > 100 ~ (round(Value))),
label = paste0(indicator_label, "\n",
"Year: ", Year, "\n",
"Value: ", Value)) |>
filter(indicator_label != "Consumer price index") |>
ggplot(aes(x = Year, y = rescaled_value, group = indicator_label)) +
geom_line(aes(colour = indicator_label,
tooltip = label)) +
scale_colour_manual(values = c("#35B779FF", "#440154FF", "#EDD03AFF")) +
scale_x_continuous(breaks = seq(2012, 2024, 2)) +
facet_wrap(~ Country_Name_Short, ncol = 6) +
labs(title = "Macroeconomic indicator trends; hover for details",
colour = "",
y = "Rescaled value",
x = "",
caption = "Source: World Bank") +
theme(legend.position = "top",
axis.text.x = element_text(angle = 40, hjust = .8, vjust = 1, size = 6),
axis.text.y = element_text(size = 6),
plot.caption = element_text(hjust = .5),
strip.background = element_rect(fill = "black"),
element_text(size=6),
plot.title = element_text(size = 11))
ggplotly(economic_stability,
height = 700,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", yanchor = "top")) |>
config(scrolZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", yanchor = "top", xanchor= "right")) |>
config(scrolZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = .95)) |>
config(scrolZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.2)) |>
config(scrolZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1)) |>
config(scrolZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.1)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1..05)) |>
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.05),
title = list(x = .1, y = 1.1)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.05),
title = list(x = 0, y = 1.2)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.09),
title = list(x = 0, y = 1.2)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = .5, y = 1.2),
title = list(x = 0, y = 1.3)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.2),
title = list(x = 0, y = 1.3)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.2),
title = list(x = 0, y = 1.2)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1.15)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1.1)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1.1)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1.05)) |>
config(scrollZoom = TRUE)
ggplotly(economic_stability,
height = 750,
tooltip = c("tooltip")) |>
layout(legend = list(orientation = "h", x = 0, y = 1.15),
title = list(x = 0, y = 1.01)) |>
config(scrollZoom = TRUE)
econ_stab |>
filter(Indicator_SubType != "GDP per capita, PPP (constant 2017 international $)") |>
rbind(gdp |>
pivot_longer(cols = c(x2012_yr2012:x2023_yr2023),
names_to = "Year",
values_to = "Value") |>
mutate(Year = str_sub(Year, start = 2, end = 5),
Indicator_SubType = "GDP per capita (constant 2015 US$)") |>
select(Country_Name_Short = country_name,
Indicator_SubType,
Year,
Value)  |>
mutate(Value = parse_number(Value),
Year = parse_double(Year)) |>
filter(!is.na(Value))) |>
group_by(Country_Name_Short, Indicator_SubType) |>
mutate(rescaled_value = range_wna(Value)) |>
ungroup() %>%
mutate(indicator_label =
case_when(
str_detect(Indicator_SubType, "Consumer price index") ~ "Consumer price index",
Indicator_SubType == "GDP per capita (constant 2015 US$)" ~ "GDP per capita",
str_detect(Indicator_SubType, "Total debt service") ~ "Total debt service",
str_detect(Indicator_SubType, "Inflation") ~ "Inflation annual",
TRUE ~ Indicator_SubType
),
Value = case_when(Value <= 100 ~ round(Value, digits = 2),
Value > 100 ~ (round(Value))),
label = paste0(indicator_label, "\n",
"Year: ", Year, "\n",
"Value: ", Value)) |>
filter(indicator_label != "Consumer price index") |>
ggplot(aes(x = Year, y = rescaled_value, group = indicator_label)) +
geom_line_interactive(aes(colour = indicator_label,
tooltip = label)) +
scale_colour_manual(values = c("#35B779FF", "#440154FF", "#EDD03AFF")) +
scale_x_continuous(breaks = seq(2012, 2024, 2)) +
facet_wrap(~ Country_Name_Short, ncol = 6) +
labs(title = "Macroeconomic indicator trends; hover for details",
colour = "",
y = "Rescaled value",
x = "",
caption = "Source: World Bank") +
theme(legend.position = "top",
axis.text.x = element_text(angle = 40, hjust = .8, vjust = 1, size = 6),
axis.text.y = element_text(size = 6),
plot.caption = element_text(hjust = .5),
strip.background = element_rect(fill = "black"),
element_text(size=6),
plot.title = element_text(size = 11)) |>
girafe(options = list(opts_tooltip(use_fill = TRUE)))
econ_stab |>
filter(Indicator_SubType != "GDP per capita, PPP (constant 2017 international $)") |>
rbind(gdp |>
pivot_longer(cols = c(x2012_yr2012:x2023_yr2023),
names_to = "Year",
values_to = "Value") |>
mutate(Year = str_sub(Year, start = 2, end = 5),
Indicator_SubType = "GDP per capita (constant 2015 US$)") |>
select(Country_Name_Short = country_name,
Indicator_SubType,
Year,
Value)  |>
mutate(Value = parse_number(Value),
Year = parse_double(Year)) |>
filter(!is.na(Value))) |>
group_by(Country_Name_Short, Indicator_SubType) |>
mutate(rescaled_value = range_wna(Value)) |>
ungroup() %>%
mutate(indicator_label =
case_when(
str_detect(Indicator_SubType, "Consumer price index") ~ "Consumer price index",
Indicator_SubType == "GDP per capita (constant 2015 US$)" ~ "GDP per capita",
str_detect(Indicator_SubType, "Total debt service") ~ "Total debt service",
str_detect(Indicator_SubType, "Inflation") ~ "Inflation annual",
TRUE ~ Indicator_SubType
),
Value = case_when(Value <= 100 ~ round(Value, digits = 2),
Value > 100 ~ (round(Value))),
label = paste0(indicator_label, "\n",
"Year: ", Year, "\n",
"Value: ", Value)) |>
filter(indicator_label != "Consumer price index") |>
ggplot(aes(x = Year, y = rescaled_value, group = indicator_label)) +
geom_line_interactive(aes(colour = indicator_label,
tooltip = label)) +
scale_colour_manual(values = c("#35B779FF", "#440154FF", "#EDD03AFF")) +
scale_x_continuous(breaks = seq(2012, 2024, 2)) +
facet_wrap(~ Country_Name_Short, ncol = 6) +
labs(title = "Macroeconomic indicator trends; hover for details",
colour = "",
y = "Rescaled value",
x = "",
caption = "Source: World Bank") +
theme(legend.position = "top",
axis.text.x = element_text(angle = 40, hjust = .8, vjust = 1, size = 6),
axis.text.y = element_text(size = 6),
plot.caption = element_text(hjust = .5),
strip.background = element_rect(fill = "black"),
element_text(size=6),
plot.title = element_text(size = 11)) %>%
girafe(ggobj = .,
options = list(opts_tooltip(use_fill = TRUE)))
economic_stability_alt <- econ_stab |>
filter(Indicator_SubType != "GDP per capita, PPP (constant 2017 international $)") |>
rbind(gdp |>
pivot_longer(cols = c(x2012_yr2012:x2023_yr2023),
names_to = "Year",
values_to = "Value") |>
mutate(Year = str_sub(Year, start = 2, end = 5),
Indicator_SubType = "GDP per capita (constant 2015 US$)") |>
select(Country_Name_Short = country_name,
Indicator_SubType,
Year,
Value)  |>
mutate(Value = parse_number(Value),
Year = parse_double(Year)) |>
filter(!is.na(Value))) |>
group_by(Country_Name_Short, Indicator_SubType) |>
mutate(rescaled_value = range_wna(Value)) |>
ungroup() %>%
mutate(indicator_label =
case_when(
str_detect(Indicator_SubType, "Consumer price index") ~ "Consumer price index",
Indicator_SubType == "GDP per capita (constant 2015 US$)" ~ "GDP per capita",
str_detect(Indicator_SubType, "Total debt service") ~ "Total debt service",
str_detect(Indicator_SubType, "Inflation") ~ "Inflation annual",
TRUE ~ Indicator_SubType
),
Value = case_when(Value <= 100 ~ round(Value, digits = 2),
Value > 100 ~ (round(Value))),
label = paste0(indicator_label, "\n",
"Year: ", Year, "\n",
"Value: ", Value)) |>
filter(indicator_label != "Consumer price index") |>
ggplot(aes(x = Year, y = rescaled_value, group = indicator_label)) +
geom_line_interactive(aes(colour = indicator_label,
tooltip = label)) +
scale_colour_manual(values = c("#35B779FF", "#440154FF", "#EDD03AFF")) +
scale_x_continuous(breaks = seq(2012, 2024, 2)) +
facet_wrap(~ Country_Name_Short, ncol = 6) +
labs(title = "Macroeconomic indicator trends; hover for details",
colour = "",
y = "Rescaled value",
x = "",
caption = "Source: World Bank") +
theme(legend.position = "top",
axis.text.x = element_text(angle = 40, hjust = .8, vjust = 1, size = 6),
axis.text.y = element_text(size = 6),
plot.caption = element_text(hjust = .5),
strip.background = element_rect(fill = "black"),
element_text(size=6),
plot.title = element_text(size = 11)) %>%
girafe(ggobj = .,
options = list(opts_tooltip(use_fill = TRUE)))
economic_stability_alt <- econ_stab |>
filter(Indicator_SubType != "GDP per capita, PPP (constant 2017 international $)") |>
rbind(gdp |>
pivot_longer(cols = c(x2012_yr2012:x2023_yr2023),
names_to = "Year",
values_to = "Value") |>
mutate(Year = str_sub(Year, start = 2, end = 5),
Indicator_SubType = "GDP per capita (constant 2015 US$)") |>
select(Country_Name_Short = country_name,
Indicator_SubType,
Year,
Value)  |>
mutate(Value = parse_number(Value),
Year = parse_double(Year)) |>
filter(!is.na(Value))) |>
group_by(Country_Name_Short, Indicator_SubType) |>
mutate(rescaled_value = range_wna(Value)) |>
ungroup() %>%
mutate(indicator_label =
case_when(
str_detect(Indicator_SubType, "Consumer price index") ~ "Consumer price index",
Indicator_SubType == "GDP per capita (constant 2015 US$)" ~ "GDP per capita",
str_detect(Indicator_SubType, "Total debt service") ~ "Total debt service",
str_detect(Indicator_SubType, "Inflation") ~ "Inflation annual",
TRUE ~ Indicator_SubType
),
Value = case_when(Value <= 100 ~ round(Value, digits = 2),
Value > 100 ~ (round(Value))),
label = paste0(indicator_label, "\n",
"Year: ", Year, "\n",
"Value: ", Value)) |>
filter(indicator_label != "Consumer price index") |>
ggplot(aes(x = Year, y = rescaled_value, group = indicator_label)) +
geom_line_interactive(aes(colour = indicator_label,
tooltip = label)) +
scale_colour_manual(values = c("#35B779FF", "#440154FF", "#EDD03AFF")) +
scale_x_continuous(breaks = seq(2012, 2024, 2)) +
facet_wrap(~ Country_Name_Short, ncol = 6) +
labs(title = "Macroeconomic indicator trends; hover for details",
colour = "",
y = "Rescaled value",
x = "",
caption = "Source: World Bank") +
theme(legend.position = "top",
axis.text.x = element_text(angle = 40, hjust = .8, vjust = 1, size = 6),
axis.text.y = element_text(size = 6),
plot.caption = element_text(hjust = .5),
strip.background = element_rect(fill = "black"),
element_text(size=6),
plot.title = element_text(size = 11))
girafe(ggobj = economic_stability_alt,
options = list(opts_tooltip(use_fill = TRUE)))
