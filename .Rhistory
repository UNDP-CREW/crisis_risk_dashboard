filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(country, origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "destination_population_") |>
select(-country),
by = c("destination_iso" = "country_iso")) |>
# Filtered small origin-destination pairs with small island territories without population data
# 9 rows total, minimal
filter(!is.na(origin_population_2020) & !is.na(destination_population_2020))
migrant_stock_changes <- migrant  |>
filter(aggregation == "no") |>
filter(area_of_destination %in% country_list |
area_of_origin %in% country_list) |>
filter(value != 0 & sex != "total") |>
group_by(area_of_origin, area_of_destination, year, sex) |>
summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = "year",
values_from = "migrants",
values_fill = 0,
names_prefix = "migrants_") |>
mutate(origin_iso = countrycode(area_of_origin,
origin = "country.name",
destination = "iso3c"),
destination_iso = countrycode(area_of_destination,
origin = "country.name",
destination = "iso3c")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "origin_population_") |>
select(-country),
by = c("origin_iso" = "country_iso")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(country, origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "destination_population_") |>
select(-country),
by = c("destination_iso" = "country_iso")) |>
# Filtered small origin-destination pairs with small island territories without population data
# 9 rows total, minimal
filter(!is.na(origin_population_2020) & !is.na(destination_population_2020))
migrant  |>
filter(aggregation == "no") |>
filter(area_of_destination %in% country_list |
area_of_origin %in% country_list) |>
filter(value != 0 & sex != "total") |>
group_by(area_of_origin, area_of_destination, year, sex) |>
summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = "year",
values_from = "migrants",
values_fill = 0,
names_prefix = "migrants_") |>
mutate(origin_iso = countrycode(area_of_origin,
origin = "country.name",
destination = "iso3c"),
destination_iso = countrycode(area_of_destination,
origin = "country.name",
destination = "iso3c")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "origin_population_") |>
select(-country),
by = c("origin_iso" = "country_iso"))
migrant  |>
filter(aggregation == "no") |>
filter(area_of_destination %in% country_list |
area_of_origin %in% country_list) |>
filter(value != 0 & sex != "total") |>
group_by(area_of_origin, area_of_destination, year, sex) |>
summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = "year",
values_from = "migrants",
values_fill = 0,
names_prefix = "migrants_") |>
mutate(origin_iso = countrycode(area_of_origin,
origin = "country.name",
destination = "iso3c"),
destination_iso = countrycode(area_of_destination,
origin = "country.name",
destination = "iso3c")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "origin_population_") |>
select(-country),
by = c("origin_iso" = "country_iso"))
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "origin_population_")
population_estimates
migrant_stock_changes <- migrant  |>
filter(aggregation == "no") |>
filter(area_of_destination %in% country_list |
area_of_origin %in% country_list) |>
filter(value != 0 & sex != "total") |>
group_by(area_of_origin, area_of_destination, year, sex) |>
summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = "year",
values_from = "migrants",
values_fill = 0,
names_prefix = "migrants_") |>
mutate(origin_iso = countrycode(area_of_origin,
origin = "country.name",
destination = "iso3c"),
destination_iso = countrycode(area_of_destination,
origin = "country.name",
destination = "iso3c")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(country, origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "origin_population_") |>
select(-country),
by = c("origin_iso" = "country_iso")) |>
left_join(
population_estimates |>
filter(year %in% c(2000, 2010, 2015, 2020)) |>
mutate(country_iso = countrycode(country, origin = "country.name", destination = "iso3c")) |>
pivot_wider(names_from = year,
values_from = population,
names_prefix = "destination_population_") |>
select(-country),
by = c("destination_iso" = "country_iso")) |>
# Filtered small origin-destination pairs with small island territories without population data
# 9 rows total, minimal
filter(!is.na(origin_population_2020) & !is.na(destination_population_2020))
migrant_stock_changes |> glimpse()
migrant_stock_changes |>
select(area_of_destination, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
glimpse()
migrant_stock_changes |>
select(area_of_destination, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
mutate(year = str_remove_all(year, "migrants_"),
year = as.numeric(year))
migrant_stock_changes |>
select(area_of_destination, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
mutate(year = str_remove_all(year, "migrants_"),
year = as.numeric(year)) |>
glimpse()
migrant_treemaps <- migrant_stock_changes |>
select(area_of_destination, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
mutate(year = str_remove_all(year, "migrants_"),
year = as.numeric(year))
migrants_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps1"))
migrant_treemaps <- migrant_stock_changes |>
select(area_of_destination, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
mutate(year = str_remove_all(year, "migrants_"),
year = as.numeric(year))
migrants_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps1"))
migrant_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps1"))
migrant_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps1.xlsx"))
migrant_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps2.xlsx"))
migrant_treemaps <- migrant_stock_changes |>
select(area_of_origin, area_of_destination, sex,
migrants_1990:migrants_2020,
origin_iso, destination_iso) |>
pivot_longer(cols = c(migrants_1990:migrants_2020),
names_to = "year",
values_to = "value") |>
mutate(year = str_remove_all(year, "migrants_"),
year = as.numeric(year))
migrant_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps2.xlsx"))
migrant_treemaps |>
writexl::write_xlsx(here("data", "migrant_treemaps1.xlsx"))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 9.5)
library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(countrycode)
library(viridis)
library(ggraph)
library(ggforce)
library(plotly)
library(widyr)
library(tidytext)
library(janitor)
`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())
show_col(viridis_pal(option = "cividis")(8))
country_list <- c("Australia", "Afghanistan", "Bangladesh", "Bhutan", "Cambodia",
"China", "Fiji", "Hong Kong", "Japan", "India", "Indonesia",
"Iran",  "Laos", "Malaysia", "Maldives", "Mongolia", "Myanmar",
"Nepal", "New Zealand",  "North Korea", "Pakistan", "Papua New Guinea",
"Philippines", "Singapore", "Solomon Islands", "South Korea",
"Sri Lanka", "Thailand", "Timor-Leste", "Vanuatu", "Vietnam")
world_shape <- st_read(here("data",
"world-administrative-boundaries",
"world-administrative-boundaries.shp"),
quiet = TRUE)
population <- read_csv(here("data", "wdi_all_countries_population.csv")) |>
janitor::clean_names()  %>%
mutate(across(matches("_yr"), ~ as.numeric(.))) |>
pivot_longer(cols = x2000_yr2000:x2023_yr2023,
names_to = "year",
values_to = "population") |>
mutate(year = str_sub(year, start = -4, end = -1),
year = as.double(year)) |>
rename(country = country_name) |>
mutate(country =
case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea",
str_detect(country, "Hong Kong SAR, China") ~ "Hong Kong",
str_detect(country, "Iran, Islamic Rep.") ~ "Iran",
str_detect(country, "Lao PDR") ~ "Laos",
country == "Viet Nam" ~ "Vietnam",
TRUE ~ country),
country_iso = countrycode::countrycode(country,
origin = "country.name",
destination = "iso3c")) |>
filter(!is.na(country) &
country %out% c("Data from database: World Development Indicators",
"Last Updated: 06/28/2024"))
population_estimates <- crossing(country = population$country, year = 2000:2024) |>
left_join(population |>
select(year, country, population),
by = c("year", "country")) |>
group_by(country) %>%
fill(population, .direction = "updown")
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
read_excel(here("data", "INFORM_Sub-national Risk Index for Bangladesh_ 2022_Admin Level-2_V1.xlsx")) |>
naniar::replace_with_na(list(`Riverbank Erosion` = "x")) |>
mutate(`Riverbank Erosion` = as.numeric(`Riverbank Erosion`)) |>
pivot_longer(cols = c(`Earthquake Risk`:`HAZARD & EXPOSURE`,
`Rank_Hazard Exposure`:`INFORM Vulnerability`,
`Rank-\r\nVulnerability`:`LACK OF COPING CAPACITY`,
`Rank-\r\nCoping Capacity`,
`INFORM RISK`, `Rank-Risk`),
names_to = "indicator", values_to = "value") |>
clean_names() |>
glimpse()
bgd_adm2 <- st_read(here("data", "bgd_adm2_bbs_20201113", "bgd_admbnda_adm2_bbs_20201113.shp"))
bgd_adm2 |> glimpse()
bgd_adm2 <- st_read(here("data", "bgd_adm2_bbs_20201113", "bgd_admbnda_adm2_bbs_20201113.shp")) |>
clean_names()
bgd_adm2 |> glimpse()
read_excel(here("data", "INFORM_Sub-national Risk Index for Bangladesh_ 2022_Admin Level-2_V1.xlsx")) |>
naniar::replace_with_na(list(`Riverbank Erosion` = "x")) |>
mutate(`Riverbank Erosion` = as.numeric(`Riverbank Erosion`)) |>
pivot_longer(cols = c(`Earthquake Risk`:`HAZARD & EXPOSURE`,
`Rank_Hazard Exposure`:`INFORM Vulnerability`,
`Rank-\r\nVulnerability`:`LACK OF COPING CAPACITY`,
`Rank-\r\nCoping Capacity`,
`INFORM RISK`, `Rank-Risk`),
names_to = "indicator", values_to = "value") |>
clean_names() |>
mutate(adm2_pcode = paste0("BD", geocode)) |>
glimpse()
inform_bgd <- read_excel(here("data",
"INFORM_Sub-national Risk Index for Bangladesh_ 2022_Admin Level-2_V1.xlsx")) |>
naniar::replace_with_na(list(`Riverbank Erosion` = "x")) |>
mutate(`Riverbank Erosion` = as.numeric(`Riverbank Erosion`)) |>
pivot_longer(cols = c(`Earthquake Risk`:`HAZARD & EXPOSURE`,
`Rank_Hazard Exposure`:`INFORM Vulnerability`,
`Rank-\r\nVulnerability`:`LACK OF COPING CAPACITY`,
`Rank-\r\nCoping Capacity`,
`INFORM RISK`, `Rank-Risk`),
names_to = "indicator", values_to = "value") |>
clean_names() |>
mutate(adm2_pcode = paste0("BD", geocode))
library(writexl)
inform_bgd |>
write_xlsx(here("data", "inform_bgd1.xlsx"))
inform_bgd |>
write_xlsx(here("data", "inform_bgd2.xlsx"))
bgd_pop <- read_csv(here("data", "bgd_admpop_adm2_2022.csv"))
bgd_pop |> glimpse()
?st_area
bgd_adm2 |> glimpse()
bgd_adm2 |>
mutate(area = st_area(geometry) / 1000000)
bgd_adm2_area <- bgd_adm2 |>
mutate(area = st_area(geometry) / 1000000) |>
st_drop_geometry()
bgd_adm2_area |>
glimpse()
bgd_adm2_area <- bgd_adm2 |>
mutate(area = st_area(geometry),
area_km = area / 1000000) |>
st_drop_geometry()
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area_km)
bgd_adm2_area <- bgd_adm2 |>
mutate(area = st_area(geometry),
area_km = as.numeric(area / 1000000)) |>
st_drop_geometry()
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area_km)
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km)
bgd_pop <- read_csv(here("data", "bgd_admpop_adm2_2022.csv")) |> clean_names()
bgd_pop |> glimpse()
bgd_pop |> glimpse()
bgd_adm2_area |>
arrange(desc(area_km))
bgd_adm2 |>
st_as_sf() |>
ggplot() +
geom_sf() +
geom_sf_text(aes(adm2_en))
bgd_adm2 |>
st_as_sf() |>
ggplot() +
geom_sf() +
geom_sf_text(aes(label = adm2_en))
bgd_adm2 |>
st_as_sf() |>
ggplot() +
geom_sf() +
geom_sf_text(aes(label = adm2_en),
size = 2) +
theme_void()
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
glimpse()
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km)
bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km) |>
arrange(desc(population_density))
bgd_population_density <- bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km) |>
arrange(desc(population_density))
bgd_population_density |>
write_xlsx(here("data", "bgd_population_density.xlsx"))
bgd_population_density |>
glimpse()
bgd_adm2_area <- bgd_adm2 |>
mutate(area = st_area(geometry),
area_km2 = as.numeric(area / 1000000)) |>
st_drop_geometry()
bgd_population_density <- bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km2) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km) |>
arrange(desc(population_density))
bgd_population_density <- bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km2) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km2) |>
arrange(desc(population_density))
bgd_population_density |>
select(-area) |>
pivot_longer(cols = c(area_km2:population_density),
names_to = "indicator",
values_to = "value")
bgd_population_density <- bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km2) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km2) |>
arrange(desc(population_density)) |>
select(-area) |>
pivot_longer(cols = c(area_km2:population_density),
names_to = "indicator",
values_to = "value")
bgd_population_density
bgd_population_density <- bgd_adm2_area |>
select(adm1_en, adm2_en, adm2_pcode, area, area_km2) |>
left_join(
bgd_pop |>
select(adm2_pcode, population = t_tl),
by = "adm2_pcode"
) |>
mutate(population_density = population / area_km2) |>
arrange(desc(population_density)) |>
select(-area) |>
pivot_longer(cols = c(area_km2:population_density),
names_to = "indicator",
values_to = "value") |>
mutate(indicator = str_to_title(str_replace_all(indicator, "\\_", " ")))
bgd_population_density
bgd_population_density |>
write_xlsx(here("data", "bgd_population_density.xlsx"))
bgd_food <- read_csv(here("data", "wfp_food_prices_bgd.csv")) |>
slice(2:14179)
bgd |> glimpse()
bgd_food |> glimpse()
bgd_food |> mutate(date = ymd(date))  %>% {max(.$date)}
bgd_food <- read_csv(here("data", "wfp_food_prices_bgd.csv")) |>
slice(2:14179) |> mutate(date = ymd(date))
bgd_food |>
writexl::write_xlsx(here("data", "bgd_food_prices.xlsx"))
caru <- read_excel(here("data", "CARU_Security_incident_2023.xlsx")) |>
clean_names() |>
mutate(sub_category = str_remove_all(sub_category,
"Insecurity-|Movement-|Violece-|Violence-|Death-|Drug-")) |>
mutate(nationality_of_perpetrator = case_when(
nationality_of_perpetrator %in% c("Bangaldeshi", "Bangladesh", "Bangladesi", "Bangldeshi") ~ "Bangladeshi",
str_detect(nationality_of_perpetrator, "NAP|Nap") ~ "NAp",
str_detect(nationality_of_perpetrator, "NAV|Nav") ~ "NAv",
nationality_of_perpetrator == "Bangladeshi and Rohingya" ~ "Rohingya and Bangladeshi",
TRUE ~ nationality_of_perpetrator
)) |>
naniar::replace_with_na(list(nationality_of_perpetrator = "Unknown")) |>
mutate(date = ymd(date)) %>%
mutate_at(vars(c(year, week, longitude, latitude, time)),
~ as.numeric(.)) |>
filter(!is.na(year) & !is.na(longitude) & !is.na(latitude)) |>
replace_na(list(
time = 0,
death_bd_f = 0
)) |>
select(-column2)
caru |> glimpse(
)
read_csv(here("data", "ipc_bgd_national_long_latest.csv"))
ipc <- read_csv(here("data", "ipc_bgd_national_long_latest.csv"))
ipc |> glimpse()
read_excel(here("data", "bangladesh_bbs_population-and-housing-census-dataset_2022_admin-02.xlsx"))
read_excel(here("data", "bangladesh_bbs_population-and-housing-census-dataset_2022_admin-02.xlsx")) |>
glimpse()
read_excel(here("data", "bangladesh_bbs_population-and-housing-census-dataset_2022_admin-02.xlsx")) |>
count(Division, District)
bgd_adm2
read_excel(here("data", "bangladesh_bbs_population-and-housing-census-dataset_2022_admin-02.xlsx")) |>
clean_names()
read_excel(here("data", "bangladesh_bbs_population-and-housing-census-dataset_2022_admin-02.xlsx")) |>
clean_names() |> glimpse()
