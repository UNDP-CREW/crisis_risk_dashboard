---
title: "Crisis risk dashboard"
author: "Sean Ng"
date: "13 June 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
---


```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
                      fig.width = 9.5)

library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(countrycode)
library(viridis)
library(ggraph)
library(ggforce)
library(plotly)
library(widyr)
library(tidytext)
library(janitor)
library(vdemdata)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

show_col(viridis_pal(option = "cividis")(8))

country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "India", "Indonesia", 
                  "Iran", "North Korea", "South Korea", "Laos", 
                  "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "Pakistan", "Papua New Guinea", "Philippines", 
                  "Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste", 
                  "Vanuatu", "Vietnam")

world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

population_estimates <- read_csv(here("data", "population_estimates.csv")) |>
  mutate(country_iso = countrycode(country,
                                   origin = "country.name",
                                   destination = "iso3c"))

range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

```


# Data 


## Special procedures 

```{r}
special_procedures <- read_xlsx(here("data", "Special Procedurces Communications Data.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(vulnerable_groups = 
           ifelse(
             str_detect(mandates, 
                        "minority|women|indigenous|migrants|myanmar|cambodia|slavery|persons|children|sexual orientation|girls|older|African|disability|Korea|racism|trafficking"), 
             1, 0),
         women_and_girls = 
           ifelse(str_detect(mandates, "Women|women|woman|Woman|Girl|girl"), 
                  1, 0), 
         human_rights_defenders = 
           ifelse(str_detect(mandates, "Lawyer|lawyer|Judge|judge|Defender|defender"), 
                  1, 0)) |> 
  separate(mandates, sep = "\r\n", remove = TRUE, into = paste0("mandate", 1:20)) |> 
  pivot_longer(cols = mandate1:mandate20, 
               names_to = "ignore", 
               values_to = "mandate") |> 
  filter(!is.na(mandate)) |> 
  select(-ignore) |> 
  rename(alleged_victims = nb_of_alleged_victims) |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  mutate(mandate = str_to_lower(mandate)) 
```

```{r}
special_procedures_top5 <- special_procedures |>
  filter(country %in% country_list) |> 
  group_by(country, mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  arrange(desc(count)) |> 
  slice(1:5) |> 
  mutate(mandate = str_to_title(mandate)) |> 
  ungroup()

special_procedures_top5 |> 
  write_csv(here("data", "special_procedures_top5.csv"))

special_procedures_order <- special_procedures_top5 |> 
  count(country, wt = count, sort = TRUE) |> 
  slice(1:12) |> pull(country)

special_procedures_top5 |> 
  filter(country %in% special_procedures_order) |>
  ggplot(aes(x = count, 
             y = mandate)) + 
  geom_col() + 
  facet_wrap(~ country, 
             scales = "free")
```

```{r}
special_procedures_filtered <- special_procedures |> 
  filter(country %in% country_list)

special_procedures_filtered |> write_csv(here("data", "special_procedures_filtered.csv"))
```


```{r}
special_procedures_filtered |> 
  left_join(
    population_estimates |> 
      filter(country %in% country_list & 
               year == 2023) |> 
      select(country, population),
    by = "country"
  ) 



population_estimates |> 
  filter(country %in% country_list) |> 
  filter(year == 2023)
  
```


```{r}
special_procedures |> 
  filter(country %in% country_list) |> 
  filter(vulnerable_groups > 0) |> 
  group_by(mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  arrange(desc(count))
```



```{r}
country_list

special_procedures |> 
  filter(un_region == "Asia-Pacific Group" | 
           ohchr_region == "Asia Pacific") |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  filter(country %in% country_list) |> 
  count(country)
```

## World freedom

```{r}
world_freedom <- read_xlsx(here("data", "Freedom In the World 2024-13.xlsx"), 
                           sheet = 2, 
                           skip = 1) |> 
  janitor::clean_names() |> 
  rename(country = country_territory, 
         year = edition) |> 
  filter(country %in% country_list)

world_freedom |> glimpse()
```

```{r}
world_freedom  |> 
  glimpse()
```


```{r}
world_freedom_filtered <- world_freedom |>
  select(country, 
         year, status, 
         electoral_process = a, 
         pluralism_participation = b, 
         functioning_government = c, 
         freedom_of_expression = d, 
         right_to_assembly = e, 
         rule_of_law = f, 
         personal_autonomy = g, 
         political_rights = pr, 
         civil_liberties = cl, 
         total) |> 
  pivot_longer(cols = c(electoral_process:total),
               names_to = "sub_indicator", 
               values_to = "score") |> 
  filter(!is.na(score)) |> 
  mutate(sub_indicator_category = 
           case_when(
             sub_indicator %in% c("electoral_process",
                                  "pluralism_participation",
                                  "functioning_government") ~ "political_rights", 
            sub_indicator %in% c("freedom_of_expression",
                                 "right_to_assembly", 
                                 "rule_of_law", 
                                 "personal_autonomy") ~ "civil_liberties", 
            TRUE ~ "aggregation"
           )) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) %>%
  mutate_at(vars(sub_indicator, 
                 sub_indicator_category), 
            .funs = ~ str_replace_all(str_to_title(.), "\\_", " ")) %>% 
  mutate(status = recode(status, 
                         "F" = "Free", 
                         "NF" = "Not Free", 
                         "PF" = "Partially Free"))

world_freedom_filtered |> 
  write_csv(here("data", "world_freedom_filtered.csv"))
```


```{r}
world_freedom_filtered |> 
  count(status)
  filter(year == 2024 & 
           sub_indicator == "total") |> 
  arrange(desc(score))
```

## Net freedom

```{r}

net_freedom <- read_xlsx(here("data", "Freedom on the net 2023-11.xlsx")) |> 
  janitor::clean_names() |> 
  filter(country %in% country_list) |> 
  rename(year = edition)
```

```{r}
net_freedom_filtered <- net_freedom |>  
  filter(country %in% country_list) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  mutate(freedom_status = case_when(
    total_country_score <= 39 ~ "Not free",
    total_country_score > 39 & total_country_score <= 69 ~ "Partly free",
    total_country_score > 39 ~ "Free")) |> 
  pivot_longer(cols = c(a1:total_country_score), 
               names_to = "sub_indicator", 
               values_to = "score") |> 
  mutate(sub_indicator_text =
           case_when(
             sub_indicator == "a1" ~ "Infrastructural limitations", 
             sub_indicator == "a2" ~ "Internet accesibility",
             sub_indicator == "a3" ~ "Government restrictions", 
             sub_indicator == "a4" ~ "Service provider diversity", 
             sub_indicator == "a5" ~ "Regulatory failure", 
             sub_indicator == "b1" ~ "Blocked content", 
             sub_indicator == "b2" ~ "Forced content deletion", 
             sub_indicator == "b3" ~ "Opaque, unacccountable procedures", 
             sub_indicator == "b4" ~ "Self-censorship", 
             sub_indicator == "b5" ~ "Information control and manipulation", 
             sub_indicator == "b6" ~ "Constraints on publishing", 
             sub_indicator == "b7" ~ "Lack diversity and reliability", 
             sub_indicator == "b8" ~ "Constraints on communities", 
             sub_indicator == "c1" ~ "Legal protections", 
             sub_indicator == "c2" ~ "Criminalised online activities",  
             sub_indicator == "c3" ~ "Individuals penalised", 
             sub_indicator == "c4" ~ "Restricted anonymous communication", 
             sub_indicator == "c5" ~ "State infringement of privacy", 
             sub_indicator == "c6" ~ "Data monitoring and retention", 
             sub_indicator == "c7" ~ "Extralegal intimidation", 
             sub_indicator == "c8" ~ "Cyberattacks",
             sub_indicator == "total_country_score" ~ "Country Score",
             sub_indicator == "a_obstacles_to_access" ~ 
               "Obstacles to access", 
             sub_indicator == "b_limits_on_content" ~ 
               "Limits on content", 
             sub_indicator == "c_violations_of_user_rights" ~ 
               "Violations of user rights", 
             TRUE ~ sub_indicator
           )) |>
  mutate(sub_index_group = 
           case_when(
             str_detect(sub_indicator, "a[0-9]") ~ "Obstructions to access", 
             str_detect(sub_indicator, "b[0-9]") ~ "Limits on content", 
             str_detect(sub_indicator, "c[0-9]") ~ "Violation of user rights", 
             TRUE ~ "aggregation"
           )) |> 
  filter(!is.na(score)) 

net_freedom_filtered |> write_csv(here("data", "net_freedom_filtered.csv"))
```

```{r}
net_freedom_filtered |> filter(is.na(sub_index_group))
```


```{r}
viridis_pal(option = "turbo")(9) |> show_col()
```



```{r}
net_freedom_filtered |> count(sub_indicator_text)

net_freedom_filtered |> 
  filter(year < 2019)



net_freedom |> filter(year < 2019)
```

```{r}


net_freedom_map <- net_freedom |> 
  filter(country %in% country_list) |> 
  select(country, year, total_country_score) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  mutate(freedom_status = case_when(
    total_country_score <= 39 ~ "Not free",
    total_country_score > 39 & total_country_score <= 69 ~ "Partly free",
    total_country_score > 39 ~ "Free"))

net_freedom_map |> write_csv(here("data", "net_freedom_map.csv"))

net_freedom_map |> 
  left_join(world_shape, 
             by = c("country_iso" = "iso3")) |> 
  st_as_sf() |> 
  ggplot() + 
  geom_sf(size = .1, colour = "grey", 
          aes(fill = total_country_score)) 
  coord_sf(xlim = c("37", "135"), 
                  ylim = c("-35", "60"),lims_method = "geometry_bbox")
  

```


```{r}
net_freedom_charts <- net_freedom |> 
  filter(country %in% country_list) |> 
  pivot_longer(cols = a1:total_country_score, 
               names_to = "sub_indicator", 
               values_to = "score") |> 
  mutate(sub_indicator_text =
           case_when(
             sub_indicator == "a1" ~ "Infrastructural limitations", 
             sub_indicator == "a2" ~ "Internet accesibility",
             sub_indicator == "a3" ~ "Government restrictions", 
             sub_indicator == "a4" ~ "Service provider diversity", 
             sub_indicator == "a5" ~ "Regulatory failure", 
             sub_indicator == "b1" ~ "Blocked content", 
             sub_indicator == "b2" ~ "Forced content deletion", 
             sub_indicator == "b3" ~ "Opaque, unacccountable procedures", 
             sub_indicator == "b4" ~ "Self-censorship", 
             sub_indicator == "b5" ~ "Information control and manipulation", 
             sub_indicator == "b6" ~ "Constraints on publishing", 
             sub_indicator == "b7" ~ "Lack diversity and reliability", 
             sub_indicator == "b8" ~ "Constraints on communities", 
             sub_indicator == "c1" ~ "Legal protections", 
             sub_indicator == "c2" ~ "Criminalised online activities",  
             sub_indicator == "c3" ~ "Individuals penalised", 
             sub_indicator == "c4" ~ "Restricted anonymous communication", 
             sub_indicator == "c5" ~ "State infringement of privacy", 
             sub_indicator == "c6" ~ "Data monitoring and retention", 
             sub_indicator == "c7" ~ "Extralegal intimidation", 
             sub_indicator == "c8" ~ "Cyberattacks", 
             TRUE ~ sub_indicator
           )) |> 
  mutate(sub_index_group = 
           case_when(
             str_detect(sub_indicator, "a[0-9]") ~ "A. Obstructions to access", 
             str_detect(sub_indicator, "b[0-9]") ~ "B. Limits on content", 
             str_detect(sub_indicator, "c[0-9]") ~ "C. Violation of user rights", 
             TRUE ~ "aggregation"
           )) |> 
  filter(!is.na(score))
  
net_freedom_charts |> write_csv(here("data", "net_freedom_charts.csv"))

net_freedom_charts |> filter(!is.numeric(score))

net_freedom_charts |> filter(is.na(score))
```











## Displacement

```{r}
displacement <- read_csv(here("data", "displacement_data.csv")) |> 
  janitor::clean_names() |> 
  mutate(country_iso = countrycode(country, 
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  filter(year > 2007) |>
  pivot_wider(names_from = indicator_sub_type, 
              values_from = sum_of_value) |> 
  janitor::clean_names() |>
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0)) |> 
  mutate(total_displacement = 
           disaster_new_displacement + 
           conflict_stock_displacement +
           conflict_new_displacement) |> 
  left_join(population_estimates |> 
              filter(year %in% c(2017, 2018, 2019)), 
            by = c("country", "year")) |>
  mutate(disaster_per_100k = disaster_new_displacement / population * 100000, 
         conflict_per_100k = (conflict_stock_displacement +
                                  conflict_new_displacement) / population * 100000, 
         total_displacement_100k = total_displacement / population * 100000, 
         conflict_subtotal_displacement = 
           conflict_stock_displacement + conflict_new_displacement)  %>%
  mutate_at(vars(disaster_per_100k,
                 conflict_per_100k, 
                 total_displacement_100k), 
            ~ round(., digits = 6)) |> 
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0, 
                  population = 0, 
                  disaster_per_100k = 0, 
                  conflict_per_100k = 0, 
                  total_displacement = 0, 
                  total_displacement_100k = 0, 
                  conflict_subtotal_displacement = 0)) 

displacement |> write_csv(here("data", "displacement_per_capita.csv"))

```

```{r}
displacement |> filter(!is.na(conflict_per_100k))

displacement |> filter(year == 2019)

displacement |> filter()
```





## Human rights defenders

```{r}

hrd <- read_csv(here("data", "Asia Forum HRD Data(Asia Forum HRD Data).csv")) |> 
  janitor::clean_names()
```


```{r}



hrd_violation_chart <- hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
   |>
  group_by(violation_long, country) |> 
  summarise(event_count = n_distinct(serial_number), 
            average_impact = mean(impact_of_event, na.rm = TRUE), 
            .groups = "drop")  
  write_csv(here("data", "hrd_violation_chart.csv"))
  

hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  separate(violation, sep = "\\|", remove = FALSE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) 
  group_by(violation_long, country) 
```


```{r}
hrd |> 
  filter(str_detect(date_added, "2023")) |> 
  filter(str_detect(rights_concerned, "Offline")) |> 
  sample_n(5) |> 
  pull(rights_concerned)
```


```{r}
hrd |> 
  separate(hrd, sep = "\\|", remove = FALSE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore",
               values_to = "hrd_long") |> 
  filter(!is.na(hrd_long)) |> 
  group_by(hrd_long) |> 
  summarise(
    event_count = n_distinct(serial_number), 
    total_impact = sum(impact_of_event, na.rm = TRUE),
    average_impact = mean(impact_of_event, na.rm = TRUE), 
    .groups = "drop") |> 
  write_csv(here("data", "hrd_victims_chart.csv"))
```

### HRD long



```{r}
hrd_long <- hrd |>
  # Revert to Asia forum, these 18 rows are missing key data
  # that needs to be encoded
  filter(!is.na(violation) | !is.na(rights_concerned) | !is.na(hrd)) |> 
  select(-source, -related_events) |> 
  mutate(initial_date = ifelse(is.na(initial_date), date_added, initial_date)) |> 
  separate(rights_concerned, sep = "\\|", remove = TRUE, 
           into = paste0("rights", 1:7)) |>
  pivot_longer(cols = rights1:rights7, 
               names_to = "ignore1", 
               values_to = "rights_long") |> 
  filter(rights_long %out% c("Offline", "Online")) |> 
  separate(violation, sep = "\\|", remove = TRUE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore2",
               values_to = "violation_long") |> 
  separate(hrd, sep = "\\|", remove = TRUE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore3",
               values_to = "hrd_long") |> 
  filter(!is.na(hrd_long) | !is.na(rights_long) | !is.na(violation_long)) |> 
  select(-c(ignore1, ignore2, ignore3)) |> 
  distinct(serial_number, country, initial_date, summary_for_publications, 
           rights_long, violation_long, hrd_long) |> 
  # mutate(perpetrator_type = 
  #          case_when(
  #            !is.na(perpetrator_state) & is.na(perpetrator_non_state) ~ 
  #              "State", 
  #            !is.na(perpetrator_non_state) & is.na(perpetrator_state) ~ 
  #              "non-State", 
  #            !is.na(perpetrator_non_state) & !is.na(perpetrator_state) ~ 
  #              "State and non-State", 
  #            TRUE ~ "Unknown")) |> 
  replace_na(list(final_date = ""))

# writexl::write_xlsx(hrd_long, here("data", "hrd_long.xlsx"))



```

```{r}
hrd_long |> 
  group_by(rights_long, violation_long, hrd_long) |> 
  summarise(count = n_distinct(serial_number), 
            .groups = "drop") |> 
  mutate(concat = paste0(rights_long, ", ", violation_long, ", ", hrd_long), 
         concat = str_trim(str_replace_all(concat, "NA", ""))) |> 
  arrange(desc(count)) |> 
  view()
```


```{r}

set.seed(47)

hrd_long |> 
  filter(violation_long == "(Arbitrary) Arrest and Detention" & 
           is.na(rights_long) & is.na(hrd_long)) |> 
  sample_n(5) |> 
  pull(summary_for_publications)
```

### HRD network graph

```{r}
hrd_long |> 
  filter(hrd_long == "Media Worker") |> 
  sample_n(5) |> 
  pull(summary_for_publications)

set.seed(33444)

hrd_long |> 
  pivot_longer(cols = c(rights_long, violation_long, hrd_long), 
               names_to = "type", 
               values_to = "event_tag") |> 
  filter(!is.na(event_tag)) |> 
  distinct(serial_number, event_tag) |>
  add_count(event_tag) |> 
  pairwise_cor(event_tag, serial_number, sort = TRUE) |> 
  left_join(
    hrd_long |>
      pivot_longer(
        cols = c(rights_long, violation_long, hrd_long),
        names_to = "type",
        values_to = "event_tag"
      ) |>
      filter(!is.na(event_tag)) |>
      distinct(serial_number, event_tag) |>
      add_count(event_tag) |>
      pairwise_count(event_tag, serial_number, sort = TRUE), 
    by = c("item1", "item2")
  ) |> 
  filter(correlation >= .1 & n > 10) |> 
  filter(item1 != "Academic" & item2 != "Academic") |> 
  igraph::graph_from_data_frame() %>% 
  ggraph(layout = "kk") + 
  geom_edge_link(aes(alpha = correlation,
                     edge_width = n), 
                 colour = "blue", 
                 lineend = "round",
                 check_overlap = TRUE) + 
  scale_alpha_continuous(range = c(0.1, 0.4)) +
  geom_node_point(colour = "blue", alpha = 0.3) +
  geom_node_text(aes(label = name), size = 3.5)

ggsave(here("plots", "hrd_network_graph.png"), 
       width = 42.0, height = 29.7, units = "cm", dpi = 300)


```








#### Perpetrators

```{r}
hrd |>
 select(-source, -related_events) |> 
 separate(perpetrator_non_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_non_state", 1:2)) |> 
  filter(!is.na(perp_non_state2)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore5",
               values_to = "perp_non_state_long") |> 
  filter(!is.na(perp_state_non_long)) |> 
  mutate(perpetrator = str_trim(paste0(perpetrator_state, 
                                       "and ", 
                                       perpetrator_non_state)),
         perpetrator_type = 
           case_when(
             perpetrator_non_state == "" & perpetrator_state != "" ~ 
               "State",
             perpetrator_non_state != "" & perpetrator_state == "" ~
               "non-State",
             perpetrator_non_state != "" & perpetrator_state != "" ~
               "State and non-State", 
             TRUE ~ "Unknown"
         ))
  
```



```{r}
hrd |> 
  filter(is.na(perpetrator_state) & is.na(perpetrator_non_state)) 
```

```{r eval = FALSE}

# Deprecated -- return once you know what to do with the perpetrator data 

hrd |>
  # Revert to Asia forum, these 18 rows are missing key data
  # that needs to be encoded
  filter(!is.na(violation) | !is.na(rights_concerned) | !is.na(hrd))
  select(-source, -related_events) |> 
  separate(rights_concerned, sep = "\\|", remove = TRUE, 
           into = paste0("rights", 1:7)) |>
  pivot_longer(cols = rights1:rights7, 
               names_to = "ignore1", 
               values_to = "rights_long") |> 
    filter(!is.na(rights_long) & 
           rights_long %out% c("Offline", "Online")) |> 
  separate(violation, sep = "\\|", remove = TRUE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore2",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) |> 
  separate(hrd, sep = "\\|", remove = TRUE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore3",
               values_to = "hrd_long") |> 
  separate(perpetrator_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_state", 1:4)) |> 
  pivot_longer(cols = perp_state1:perp_state4,
               names_to = "ignore4",
               values_to = "perp_state_long") |> 
  separate(perpetrator_non_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_non_state", 1:2)) |> 
  pivot_longer(cols = perp_non_state1:perp_non_state2,
               names_to = "ignore5",
               values_to = "perp_non_state_long") |> 
  select(-c(ignore1, ignore2, ignore3, ignore4, ignore5)) 
  replace_na(list(imapct_of_event = 0, 
                  initial_date = "", 
                  final_date = "", 
                  perpetrator_state = "", 
                  perpetrator_non_state = "")) |> 
  mutate(perpetrator = str_trim(paste0(perpetrator_state, 
                                       "and ", 
                                       perpetrator_non_state)),
         perpetrator_type = 
           case_when(
             perpetrator_non_state == "" & perpetrator_state != "" ~ 
               "State",
             perpetrator_non_state != "" & perpetrator_state == "" ~
               "non-State",
             perpetrator_non_state != "" & perpetrator_state != "" ~
               "State and non-State", 
             TRUE ~ "Unknown"
         ), 
         perpetrator = ifelse(perpetrator_type %in% 
                                c("State", "no-State", "Unknown"), 
                              str_replace_all(perpetrator, "and", ""), 
                              perpetrator
                              ), 
         perpetrator = str_trim(perpetrator))

hrd_long |> write_csv(here("data", "hrd_long.csv"))

hrd_long |> count(perpetrator)


hrd_long |> glimpse()

hrd_long |> filter(is.na(perp_state_long) & is.na(perp_non_state_long)) 
```











## Migration 

```{r}
aggregation_list <- c("AFRICA",
"ASIA",
"Central and Southern Asia",
"Central America",
"Central Asia",
"EUROPE",			
"Eastern Africa",	
"Eastern Asia",	
"Eastern Europe",	
"Eastern and South-Eastern Asia",
"High-income countries",
"LATIN AMERICA AND THE CARIBBEAN",
"Land-locked Developing Countries (LLDC)",	
"Latin America and the Caribbean",
"Least developed countries",
"Less developed regions",		
"Less developed regions, excluding China",
"Less developed regions, excluding least developed countries",
"Low-income countries",		
"Lower-middle-income countries",
"Middle-income countries",
"Middle Africa",
"NORTHERN AMERICA",
"Northern Africa",		
"Northern Africa and Western Asia",		
"Northern Europe",
"OCEANIA",
"Oceania (excluding Australia and New Zealand)",
"Small island developing States (SIDS)",
"Sub-Saharan Africa",
"Upper-middle-income countries",
"Western Africa",		
"Western Asia",		
"Western Europe",			
"Western Sahara",
"WORLD", 
"Australia and New Zealand", 
"Europe and Northern America", 
"Developed regions", 
"South-Eastern Asia", 
"Southern Asia", 
"Southern Europe",
"Caribbean",
"South America",
"Other",
"Southern Africa",
"Melanesia",
"Micronesia",
"Polynesia")
```


```{r warning=FALSE}


migrant <- read_excel(here("data", "undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx"), 
           sheet = 2, 
           skip = 8) |> 
  janitor::clean_names() |>
  pivot_longer(cols = 8:28, 
               names_to = "name", 
               values_to = "value") |> 
  mutate(name = str_replace(name, "x", ""))|> 
  mutate(sex = case_when(
    name %in% c("1990_8", "1995_9", "2000_10", "2005_11", 
                "2010_12", "2015_13", "2020_14") ~ "total", 
    name %in% c("1990_15", "1995_16", "2000_17", "2005_18", 
                "2010_19", "2015_20", "2020_21") ~ "male", 
    name %in% c("1990_22", "1995_23", "2000_24", "2005_25", 
                "2010_26", "2015_27", "2020_28") ~ "female",
    TRUE ~ "wrong"
  )) |> 
  mutate(year = as.numeric(str_sub(name, start = 1L, end = 4L))) |>
  rename(area_of_destination = region_development_group_country_or_area_of_destination, 
         area_of_origin = region_development_group_country_or_area_of_origin) %>%
  mutate_at(vars(area_of_destination, area_of_origin), 
            .funs = ~str_replace_all(., "\\*", "")) |> 
  mutate(aggregation = ifelse(
    area_of_origin %in% aggregation_list | 
      area_of_destination %in% aggregation_list, 
    "yes", "no"
  )) %>% 
  mutate_at(vars(area_of_destination, 
                 area_of_origin), 
            .funs = ~case_when(
                . == "China, Hong Kong SAR" ~ "Hong Kong", 
                . == "Dem. People's Republic of Korea" ~ "North Korea", 
                . == "Iran (Islamic Republic of)" ~ "Iran", 
                . == "Lao People's Democratic Republic" ~ "Laos", 
                . == "Republic of Korea" ~ "South Korea",
                . == "Viet Nam" ~ "Vietnam", 
                TRUE ~ .
              ))
  
```



```{r}
migrant |> 
  filter(aggregation == "no") |> 
  select(-name) |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total") |> 
```

```{r}
migrant |> glimpse()

migrant |> count(sex)
```


#### Keep working on this
```{r}
migrant_filtered <- migrant |> 
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex != "total") |> 
  group_by(area_of_origin, area_of_destination, year, sex) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
  mutate(origin_iso = countrycode(area_of_origin,
                                  origin = "country.name", 
                                   destination = "iso3c"), 
         destination_iso = countrycode(area_of_destination, 
                                       origin = "country.name", 
                                       destination = "iso3c")) |> 
   left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "origin_population_") |> 
      select(-country), 
    by = c("origin_iso" = "country_iso")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "destination_population_") |> 
      select(-country), 
    by = c("destination_iso" = "country_iso"))  
  glimpse()
```

```{r}
viridis_pal(option = "turbo")(8) |> show_col()
```

### migrant stock changes

```{r}
migrant_stock_changes <- migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex != "total") |> 
  group_by(area_of_origin, area_of_destination, year, sex) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(names_from = "year", 
              values_from = "migrants", 
              values_fill = 0, 
              names_prefix = "migrants_") |> 
  mutate(origin_iso = countrycode(area_of_origin,
                                  origin = "country.name", 
                                   destination = "iso3c"), 
         destination_iso = countrycode(area_of_destination, 
                                       origin = "country.name", 
                                       destination = "iso3c")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "origin_population_") |> 
      select(-country), 
    by = c("origin_iso" = "country_iso")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "destination_population_") |> 
      select(-country), 
    by = c("destination_iso" = "country_iso")) |>  
  # Filtered small origin-destination pairs with small island territories without population data
  # 9 rows total, minimal
  filter(!is.na(origin_population_2020) & !is.na(destination_population_2020))

```


```{r}
migrant_stock_changes |> write_csv(here("data", "migrant_stock_changes.csv"))
```


```{r}
migrant_filtered |> glimpse()
```





### Migrants by origin 

```{r}
migrant_filtered |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants = sum(migrants)[year == 2020]) |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |>
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) 
```


```{r}
migrant_stock_changes |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants_2020 = sum(migrants_2020)) |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |> 
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  mutate(total_migrants_sort = sum(migrants_2020), 
         total_migrants_pc = total_migrants_sort / origin_population_2020) |> 
  
  ungroup() |> 
  mutate(area_of_origin = fct_reorder(area_of_origin, total_migrants_pc), 
         sex = str_to_title(sex)) |> 
  ggplot(aes(x = migrants_2020, y = area_of_origin)) + 
  geom_col(aes(fill = migrants_pc)) +
  geom_text(aes(label = comma(migrants_2020)), 
            size = 3, 
            hjust = "inward") + 
  scale_fill_viridis(direction = -1, end= .95) +
  scale_x_continuous(labels = number_format(scale = 1 / 1000000, suffix = "M")) + 
  facet_row(vars(sex), scales = "free_x", space = "free") + 
  labs(title = "Number of persons who migrated, by country of origin, 2020", 
       subtitle = "Colour shows % of country population have migrated", 
       fill = "% Migrated", 
       y = "", 
       x = "Number of migrants 2020", 
       caption = "Source: International Migrant Stock 2020") + 
  theme(legend.position = c(.9, .7), 
        strip.background = element_rect(fill = "black"))
```

```{r}
ggsave(here("plots", "migration_barchart_origin.png"), 
       height = 250, 
       width = 210, 
       units = "mm")
```

```{r}
migrant_bars <- migrant_stock_changes |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants_2020 = sum(migrants_2020),
            .groups = "drop") |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |> 
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  mutate(total_migrants_sort = sum(migrants_2020), 
         total_migrants_pc = total_migrants_sort / origin_population_2020) |> 
  
  ungroup() |> 
  mutate(area_of_origin = fct_reorder(area_of_origin, total_migrants_pc), 
         sex = str_to_title(sex)) |> 
  ggplot(aes(x = migrants_2020, y = area_of_origin, 
             text = paste0("Origin: ", area_of_origin, "\n", 
                           "Migrants: ", comma(migrants_2020), "\n", 
                           "% Migrated: ", round(migrants_pc, digits = 2)))) + 
  geom_col(aes(fill = migrants_pc)) +
  scale_fill_viridis(direction = -1, end= .95) +
  scale_x_continuous(labels = number_format(scale = 1 / 1000000, suffix = "M")) + 
  facet_row(vars(sex), scales = "free_x", space = "free") + 
  labs(title = "Number of persons who migrated, by country of origin, 2020",  
       fill = "% Migrated", 
       y = "", 
       x = "Number of migrants 2020", 
       caption = "Source: International Migrant Stock 2020") + 
  theme(legend.position = c(.9, .7), 
        strip.background = element_rect(fill = "black"),
        legend.title = element_text(size = 7), 
        legend.text = element_text(size = 6), 
        legend.key.width = unit(.33, "cm"))
   
ggplotly(migrant_bars, tooltip = c("text")) |> 
   config(diplayModeBar = FALSE) 

```

```{r}
ggsave(here("plots", "migration_barchart_origin.png"), 
       height = 250, 
       width = 210, 
       units = "mm")
```


### Migrant network graph 

```{r}
viridis_pal(option = "plasma")(3) |> show_col()

viridis_pal()(5) |> show_col()
```


```{r}

set.seed(2243)

migrant_stock_changes |> 
  select(area_of_origin, area_of_destination, sex, migrants_2020, origin_population_2020) |> 
  pivot_wider(names_from = "sex", 
              values_from = "migrants_2020", 
              values_fill = 0) |> 
  mutate(total_migrants_2020 = male + female, 
         sex_ratio = round(male * 100 / female), 
         sex_ratio = ifelse(is.infinite(sex_ratio), 0, sex_ratio), 
         sex_ratio = ifelse(is.nan(sex_ratio), 0, sex_ratio)) |> 
  arrange(desc(sex_ratio)) |> 
  filter(sex_ratio != 0) |> 
  mutate(n = 1,
         origin_population_pc = round(total_migrants_2020 / origin_population_2020 * 100, 
                                      digits = 2)) |> 
  filter(total_migrants_2020 > 100000 | origin_population_pc > 3) |> 
  igraph::graph_from_data_frame() |> 
  ggraph(layout = "circle") + 
  geom_edge_link(aes(edge_width = total_migrants_2020, 
                     alpha = origin_population_pc, 
                     edge_colour = sex_ratio, 
                     colour = sex_ratio),
                 lineend = "round",
                 check_overlap = TRUE) + 
  scale_edge_colour_gradient2(low = "#5DC863FF", mid = "#F58C46FF", high = "#0D0887FF", midpoint = 1,
                              trans = "log10") +
  scale_edge_width_continuous(range = c(.1, 7), 
                              labels = number_format(scale = 1 / 1000000, 
                                                     suffix = "M"), 
                              breaks = c(500000, 1000000, 2000000, 3000000)) + 
  scale_alpha_continuous(range = c(.5, 1)) +
  geom_node_point(alpha = 0.1) +
  geom_node_text(aes(label = name), size = 3) + 
  labs(title = "Origins and destinations of Asia-Pacific migrants in 2020", 
       subtitle = "Thickness of line indicates number of migrants, trasparency indicates % of origin population migrated,\nSex ratio is # of males per 100 females. Only displaying the top origin-destination pairs", 
       caption = "Source: International Migrant Stock 2020", 
       edge_width = "No. Migrants", 
       edge_colour = "Sex ratio", 
       edge_alpha = "% Migrated") + 
  theme(legend.key.size = unit(.48, "cm"), 
        legend.title = element_text(size = 8), 
        legend.text = element_text(size = 7), 
        plot.subtitle = element_text(size = 10), 
        plot.title = element_text(size = 11)) 
```

```{r}
ggsave(here("plots", "migration_network_graph.png"), 
       units = "mm", 
       height = 210, 
       width = 297)
```



```{r}
migrant_stock_changes |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  summarise(migrants_2020 = sum(migrants_2020)) |> 
  arrange(desc(migrants_2020)) |> 
  mutate(category = case_when(
           migrants_2020 > 3000000 ~ "big", 
           migrants_2020 <= 3000000 & migrants_2020 > 300000 ~ "medium", 
           migrants_2020 <= 300000 ~ "small"
         )) 
  select(area_of_origin, category)
 

```

```{r}

migrant_stock_changes |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  summarise(migrants_1990 = sum(migrants_1990), 
            migrants_1995 = sum(migrants_1995),
            migrants_2000 = sum(migrants_2000), 
            migrants_2010 = sum(migrants_2010), 
            migrants_2015 = sum(migrants_2015), 
            migrants_2020 = sum(migrants_2020)) |> 
  pivot_longer(cols = migrants_1990:migrants_2020, 
               names_to = "year", 
               values_to = "value") |> 
  mutate(year = str_remove_all(year, "migrants_"), 
         year = as.double(year), 
         label = ifelse(year %in% c(2020, 1990), area_of_origin, "")) |> 
  left_join(
    migrant_stock_changes |>
      group_by(area_of_origin) |>
      summarise(migrants_2020 = sum(migrants_2020)) |>
      arrange(desc(migrants_2020)) |>
      mutate(
        category = case_when(
          area_of_origin %in% c("India", "China", "Bangladesh", "Pakistan", "Philippines", 
                                "Afghanistan","Indonesia", "Myanmar", "Vietnam") ~ 
            ">3 million migrants", 
          area_of_origin %in% c("Nepal", "South Korea", "Sri Lanka", "Malaysia", 
                                "Iran", "Laos", "Cambodia", "Thailand", "Hong Kong") ~
            "300,000-3 million", 
          area_of_origin %in% c("Fiji", "North Korea", "Mongolia", "Bhutan", 
                                "Timor-Leste", "Vanuatu", "Papua New Guinea", 
                                "Solomon Islands", "Maldives") ~ 
            "<=300,000 migrants")) |>
      select(area_of_origin, category), 
    by = "area_of_origin"
  ) |> 
  ggplot(aes(x = year, y = value)) + 
  geom_line(aes(colour = area_of_origin), 
            size = .6) + 
  ggrepel::geom_text_repel(aes(label = label), 
            size = 1.5) +
  scale_y_log10(labels = comma) + 
  theme(legend.position = "none", 
        strip.background = element_rect(fill = "black")) +
  facet_wrap(~ fct_relevel(category, 
                           c("<=300,000 migrants",
                              "300,000-3 million", 
                             ">3 million migrants in 2020")), 
             ncol = 1, scales = "free_y") + 
  labs(title = "Changes in number of persons migrated by area of origin, 1990-2020", 
       subtitle = "Source: International Migrant Stock", 
       y = "",
       x = "")


migrant |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin, )
  
  glimpse()
```



```{r}
migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total" & year == 2020) |> 
  group_by(area_of_origin, area_of_destination, year) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  group_by(area_of_destination) |> 
  summarise(migrants = sum(migrants, na.rm = TRUE)) |> 
  arrange(desc(migrants))
```




```{r}
migrant |> 
```



## VDEM

```{r}
country_list 

library(vdemdata)

vdem_export <- vdem |> 
  filter(country_name %in% country_list) |> 
  select(country_name, year, matches("v2x"), 
         -matches("sd|codehigh|codelow")) |> 
  select(country_name, year, v2x_polyarchy:v2x_egaldem) |> 
  pivot_longer(cols = c(v2x_polyarchy:v2x_egaldem), 
               names_to = "index", 
               values_to = "value") |> 
  mutate(index_text = 
           case_when(
             index == "v2x_polyarchy" ~ "Electoral democracy index", 
             index == "v2x_libdem" ~ "Liberal democracy index",
             index == "v2x_partipdem" ~ "Participatory democracy index",
             index == "v2x_delibdem" ~ "Deliberative democracy index",
             index == "v2x_egaldem" ~ "Egalitarian democracy index", 
             TRUE ~ index
           ))

vdem |> write_csv(here("data", "vdem_export.csv"))
```


```{r}

vdem |> 
  mutate(country_name = ifelse(country_name == "Burma/Myanmar", 
                               "Myanmar", 
                               country_name)) |>
  filter(country_name %in% country_list) |> 
  select(country_name, 
         year, 
         v2x_polyarchy,
         v2x_libdem, 
         v2x_partipdem, 
         v2x_delibdem, 
         v2x_egaldem 
         )
```



## Corruption Perceptions Index

```{r}
country_list
```


```{r}
cpi <- read_excel(here("data", "CPI2023_Global_Results__Trends.xlsx"), 
           sheet = "CPI Historical (internal)", 
           skip = 3) |> 
  # Not enough rows
  select(-`Transparency International Bribe Payers Survey`) |> 
  pivot_longer(
    cols = c(`African Development Bank CPIA`:`World Justice Project Rule of Law Index`,
             `CPI score`), 
    names_to = "index", 
    values_to = "value"
  ) |> 
  filter(!is.na(value)) |> 
  clean_names() |> 
  rename(country = country_territory) |> 
  filter(country %in% country_list)


cpi |> write_csv(here("data", "cpi_long.csv"))

cpi |> skimr::skim()
```


```{r}
cpi |> 
  filter(country %in% country_list) |> 
  filter(country == "Bangladesh") |> 
  ggplot(aes(x = year, y = value, group = index)) + 
  geom_line() + 
  facet_wrap(~index)
  glimpse()
```


## Maldives 





```{r}
maldives <- read_excel(here("data", "maldives_duplicates_Cleaned 1.xlsx")) |> 
  janitor::clean_names()


gbv_indicators <- maldives |> 
  count(indicator, sort = TRUE) |>
  # This is where we filtered out the crime data
  filter(n < 43) |> 
  filter(indicator %out% c("Cases Sent for Prosecution", 
                           "Growth Rate ( 2014 to 2022)")) |> 
  pull(indicator)

maldives_normalised <- maldives |> 
  # Remove resident Maldivians 2014
  filter(population %out% c("Resident Maldivians 2014")) |> 
  # cleaning up spelling and recoding NAs
  mutate(population = 
           case_when(
             population == "Resident population" ~ "Resident Population",
             is.na(population) ~ "Provisionally Resident Population", 
             TRUE ~ population
                     )) |> 
  # Replacing NAs in administration with "provisionally administrative islands"
  mutate(administration = 
           ifelse(is.na(administration), 
                  "provisionally Administrative Islands", 
                  administration)) |>
  # Mutating admin level, either admin2 or admin3
  mutate(administration_level = 
           case_when(
             indicator %in% gbv_indicators ~ "admin2",
             TRUE ~ "admin3")) |> 
  group_by(indicator, population) %>% 
  # Mutating a new range column within each population and indicators
  mutate(range01 = range_wna(value)) |> 
  ungroup() 


maldives_normalised |> write_csv(here("data", "maldives_normalised.csv"))


```

Error in the dataset provided 

```{r}
maldives_normalised |> count(administration)

maldives |> filter(indicator %in% gbv_indicators) |> 
  count(population)

maldives_normalised |> count(population)

maldives_normalised |> 
  filter(administration == "Administrative Islands" & 
           administration_level == "admin3") |> 
   count(indicator, population, administration, atoll_official, island, sort = TRUE) 

  duplicates <- maldives |> 
    filter(population %out% c("Resident Maldivians 2014")) |> 
    count(indicator, population, administration, atoll_official, island, sort = TRUE) |> 
    filter(n > 1) |> 
    mutate(duplicate = TRUE)

maldives_duplicates <- maldives |> 
  filter(population %out% c("Resident Maldivians 2014")) |> 
  left_join(
    duplicates |> 
      select(-n), 
    by = c("indicator", "population", "administration", "atoll_official", "island")
  ) |> 
  mutate(duplicate = ifelse(is.na(duplicate), FALSE, duplicate))

maldives_duplicates |> write_csv(here("data", "maldives_duplicates.csv"))
```

```{r}
maldives |> filter(duplicate == TRUE)
```



```{r}
maldives |> 
  
  filter(atoll_official == "Seenu Atoll" & island == "Hithadhoo"& 
           indicator == "Child Dependency Ratio" & 
           population == "Maldivians")
  
  

```


```{r}
maldives |> 
  filter(population != "Resident Maldivians 2014" & 
           !is.na(indicator)) |> 
  mutate(administration = 
           ifelse(is.na(administration), 
                  "provisionally Administrative Islands", 
                  administration)) |>
  mutate(administration_level = 
           case_when(
             indicator %in% exclude_indicators ~ "admin3",
             TRUE ~ "admin2")) |> 
  group_by(indicator, population) %>% 
  mutate(range01 = range_wna(value)) |> 
  ungroup() 
```


```{r}
maldives |> 
  filter(indicator %out% exclude_indicators) |> 
  count(administration)
  glimpse()
```


```{r}
maldives_normalised |> 
  filter(population == "Maldivians") |> 
  filter(indicator %in% c("Population", "Aged-Dependency Ratio")) |>
   pivot_wider(names_from = indicator, 
              values_from = range01)


  filter(!is.na(`Total Population`) & !is.na(`Unemployment rate (%)`))
  select(indicator, island, atoll_official, population, range01) |> 
  
  ggplot(aes(x = `Population`, y = `Unemployment rate (%)`)) + 
  geom_point()
  
maldives_normalised |> 
  filter(indicator %in% c("Unemployment rate (%)", "Population")) |> 
  count(indicator)


maldives |> count(indicator)
  filter(indicator == "Population") |> 
  group_by(island, atoll_official, population) |> 
  summarise(rows = n())
  # filter(indicator %in% c("Unemployment rate (%)", "Population")) |>
  count(indicator)
  
maldives |> count(indicator, population)
```



```{r}
maldives |> 
  filter(indicator == "NEET rate (18-35 years) (%)")
```

## HRI

```{r}
hri <- read_excel(here("data", "human_rights_index.xlsx")) |> clean_names()


hri_long_filtered <- hri |> 
  rename(recommending_body = reccomending_body) %>% 
   mutate_at(vars(countries_concerned, 
                 recommending_body, 
                 recommending_regions, 
                 regions_concerned,
                 themes, 
                 affected_persons, 
                 sdgs, 
                 type), 
            ~ str_replace_all(., "\\- ", "")) |> 
  separate(countries_concerned, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("country", 1:20)) |> 
  pivot_longer(cols = country1:country20, 
               names_to = "ignore1", 
               values_to = "country") |>
  filter(!is.na(country)) |>
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea", 
    country == "Iran (Islamic Republic of)" ~ "Iran", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Republic of Korea" ~ "South Korea", 
    country == "Viet Nam" ~ "Vietnam",
    TRUE ~ country
  )) |> 
  filter(country %in% country_list) |> 
  separate(themes, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("theme", 1:36)) |>
  pivot_longer(cols = theme1:theme36, 
               names_to = "ignore2", 
               values_to = "theme") |>
  filter(!is.na(theme)) |>
  separate(affected_persons, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("affected_persons", 1:18)) |>
  pivot_longer(cols = affected_persons1:affected_persons18, 
               names_to = "ignore3", 
               values_to = "persons_affected") |>
  filter(!is.na(persons_affected))  |> 
  separate(sdgs, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("sdgs", 1:37)) |>
  pivot_longer(cols = sdgs1:sdgs37, 
               names_to = "ignore4", 
               values_to = "sdg") |>
  filter(!is.na(sdg)) |> 
  distinct(ohchr_annotation_id, 
           type, 
           sdg,
           country, 
           theme, 
           persons_affected)

annotation_id_list <- hri_long_filtered |>
  pull(ohchr_annotation_id)

hri_filtered <- hri |> 
    filter(ohchr_annotation_id %in% annotation_id_list)

hri_long_filtered |> 
  write_csv(here("data", "hri_long_filtered.csv"))

hri_filtered |> 
  write_csv(here("data", "hri_filtered.csv"))
```

```{r}
hri |> count(ohchr_annotation_id, sort = TRUE)
```


```{r}
country_list
```

