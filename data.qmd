---
title: "Crisis risk dashboard"
author: "Sean Ng"
date: "13 June 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
---


```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
                      fig.width = 9.5)

library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(countrycode)
library(viridis)
library(ggraph)
library(ggforce)
library(plotly)
library(widyr)
library(tidytext)
library(janitor)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

show_col(viridis_pal(option = "cividis")(8))

country_list <- c("Australia", "Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "Japan", "India", "Indonesia", 
                  "Iran",  "Laos", "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "New Zealand",  "North Korea", "Pakistan", "Papua New Guinea",
                  "Philippines", "Singapore", "Solomon Islands", "South Korea", 
                  "Sri Lanka", "Thailand", "Timor-Leste", "Vanuatu", "Vietnam")

world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

population <- read_csv(here("data", "wdi_all_countries_population.csv")) |> 
  janitor::clean_names()  %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) |> 
  pivot_longer(cols = x2000_yr2000:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |>
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.double(year)) |> 
  rename(country = country_name) |> 
  mutate(country = 
           case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             str_detect(country, "Hong Kong SAR, China") ~ "Hong Kong", 
                             str_detect(country, "Iran, Islamic Rep.") ~ "Iran", 
                             str_detect(country, "Lao PDR") ~ "Laos", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country), 
         country_iso = countrycode::countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  filter(!is.na(country) & 
           country %out% c("Data from database: World Development Indicators", 
                           "Last Updated: 06/28/2024"))

population_estimates <- crossing(country = population$country, year = 2000:2024) |> 
 left_join(population |> 
             select(year, country, population), 
           by = c("year", "country")) |> 
 group_by(country) %>% 
 fill(population, .direction = "updown") 

range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

```


# Data 


## Special procedures 

```{r}
special_procedures <- read_xlsx(here("data", "Special Procedurces Communications Data.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(vulnerable_groups = 
           ifelse(
             str_detect(mandates, 
                        "minority|women|indigenous|migrants|myanmar|cambodia|slavery|persons|children|sexual orientation|girls|older|African|disability|Korea|racism|trafficking"), 
             1, 0),
         women_and_girls = 
           ifelse(str_detect(mandates, "Women|women|woman|Woman|Girl|girl"), 
                  1, 0), 
         human_rights_defenders = 
           ifelse(str_detect(mandates, "Lawyer|lawyer|Judge|judge|Defender|defender"), 
                  1, 0)) |> 
  separate(mandates, sep = "\r\n", remove = TRUE, into = paste0("mandate", 1:20)) |> 
  pivot_longer(cols = mandate1:mandate20, 
               names_to = "ignore", 
               values_to = "mandate") |> 
  filter(!is.na(mandate)) |> 
  select(-ignore) |> 
  rename(alleged_victims = nb_of_alleged_victims) |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  mutate(mandate = str_to_lower(mandate)) 


```




Higer rates 


```{r}
cities <- tribble(~x, ~y, ~name,
  35.5018, 33.8938, "Beirut", 
  36.2768, 33.5132, "Damascus", 
  34.27, 31.31, "Gaza", 
  32.0853, 34.7818, "Tel Aviv", 
  35.2034, 31.9038, "Ramallah",
  35.8362, 34.4346, "Tripoli", 
  36.7135, 34.7325, "Homs"
  
)

cities |> 
  set
```



```{r}
world_shape |> filter(str_detect(name, "Lebanon|Gaza Strip|Israel|West Bank|Syrian Arab Republic"))
```



```{r}
special_procedures_top5 <- special_procedures |>
  filter(country %in% country_list) |> 
  group_by(country, mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  arrange(desc(count)) |> 
  slice(1:5) |> 
  mutate(mandate = str_to_title(mandate)) |> 
  ungroup()

special_procedures_top5 |> 
  write_csv(here("data", "special_procedures_top5.csv"))

special_procedures_order <- special_procedures_top5 |> 
  count(country, wt = count, sort = TRUE) |> 
  slice(1:12) |> pull(country)

special_procedures_top5 |> 
  filter(country %in% special_procedures_order) |>
  ggplot(aes(x = count, 
             y = mandate)) + 
  geom_col() + 
  facet_wrap(~ country, 
             scales = "free")
```

```{r}
special_procedures_filtered <- special_procedures |> 
  filter(country %in% country_list)

special_procedures |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  filter(country %in% country_list) |> 
  write_csv(here("data", "special_procedures_filtered.csv"))
```


```{r}
special_procedures_filtered |> 
  left_join(
    population_estimates |> 
      filter(country %in% country_list & 
               year == 2023) |> 
      select(country, population),
    by = "country"
  ) 



population_estimates |> 
  filter(country %in% country_list) |> 
  filter(year == 2023)
  
```


```{r}
special_procedures |> 
  filter(country %in% country_list) |> 
  filter(vulnerable_groups > 0) |> 
  group_by(mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  arrange(desc(count))
```



```{r}
country_list

special_procedures |> 
  filter(un_region == "Asia-Pacific Group" | 
           ohchr_region == "Asia Pacific") |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  filter(country %in% country_list) |> 
  count(country)
```

```{r}
special_procedures <- read_xlsx(here("data", "Special Procedurces Communications Data.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(vulnerable_groups = 
           ifelse(
             str_detect(mandates, 
                        "minority|women|indigenous|migrants|myanmar|cambodia|slavery|persons|children|sexual orientation|girls|older|African|disability|Korea|racism|trafficking"), 
             1, 0),
         women_and_girls = 
           ifelse(str_detect(mandates, "Women|women|woman|Woman|Girl|girl"), 
                  1, 0), 
         human_rights_defenders = 
           ifelse(str_detect(mandates, "Lawyer|lawyer|Judge|judge|Defender|defender"), 
                  1, 0)) |> 
  separate(mandates, sep = "\r\n", remove = TRUE, into = paste0("mandate", 1:20)) |> 
  pivot_longer(cols = mandate1:mandate20, 
               names_to = "ignore", 
               values_to = "mandate") |> 
  filter(!is.na(mandate)) |> 
  select(-ignore) |> 
  rename(alleged_victims = nb_of_alleged_victims) |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  mutate(mandate = str_to_lower(mandate)) 
```

## World freedom

```{r}
world_freedom <- read_xlsx(here("data", "Freedom In the World 2024-13.xlsx"), 
                           sheet = 2, 
                           skip = 1) |> 
  janitor::clean_names() |> 
  rename(country = country_territory, 
         year = edition) |> 
  filter(country %in% country_list)

world_freedom |> glimpse()
```

```{r}
world_freedom  |> 
  glimpse()
```


```{r}
world_freedom_filtered <- world_freedom |>
  select(country, 
         year, status, 
         electoral_process = a, 
         pluralism_participation = b, 
         functioning_government = c, 
         freedom_of_expression = d, 
         right_to_assembly = e, 
         rule_of_law = f, 
         personal_autonomy = g, 
         political_rights = pr, 
         civil_liberties = cl, 
         total) |> 
  pivot_longer(cols = c(electoral_process:total),
               names_to = "sub_indicator", 
               values_to = "score") |> 
  filter(!is.na(score)) |> 
  mutate(sub_indicator_category = 
           case_when(
             sub_indicator %in% c("electoral_process",
                                  "pluralism_participation",
                                  "functioning_government") ~ "political_rights", 
            sub_indicator %in% c("freedom_of_expression",
                                 "right_to_assembly", 
                                 "rule_of_law", 
                                 "personal_autonomy") ~ "civil_liberties", 
            TRUE ~ "aggregation"
           )) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) %>%
  mutate_at(vars(sub_indicator, 
                 sub_indicator_category), 
            .funs = ~ str_replace_all(str_to_title(.), "\\_", " ")) %>% 
  mutate(status = recode(status, 
                         "F" = "Free", 
                         "NF" = "Not Free", 
                         "PF" = "Partially Free"))

world_freedom_filtered |> 
  write_csv(here("data", "world_freedom_filtered.csv"))
```


```{r}
world_freedom_filtered |> 
  count(status)
  filter(year == 2024 & 
           sub_indicator == "total") |> 
  arrange(desc(score))
```

## Net freedom

```{r}

net_freedom <- read_xlsx(here("data", "Freedom on the net 2023-11.xlsx")) |> 
  janitor::clean_names() |> 
  rename(year = edition)
```

```{r}
net_freedom |> count(country)
```


```{r}
net_freedom_filtered |> 
  count(country)

```


```{r}
net_freedom_filtered <- net_freedom |>  
  filter(country %in% country_list) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  mutate(freedom_status = case_when(
    total_country_score <= 39 ~ "Not free",
    total_country_score > 39 & total_country_score <= 69 ~ "Partly free",
    total_country_score > 39 ~ "Free")) |> 
  pivot_longer(cols = c(a1:total_country_score), 
               names_to = "sub_indicator", 
               values_to = "score") |> 
  mutate(sub_indicator_text =
           case_when(
             sub_indicator == "a1" ~ "Infrastructural limitations", 
             sub_indicator == "a2" ~ "Internet accesibility",
             sub_indicator == "a3" ~ "Government restrictions", 
             sub_indicator == "a4" ~ "Service provider diversity", 
             sub_indicator == "a5" ~ "Regulatory failure", 
             sub_indicator == "b1" ~ "Blocked content", 
             sub_indicator == "b2" ~ "Forced content deletion", 
             sub_indicator == "b3" ~ "Opaque, unacccountable procedures", 
             sub_indicator == "b4" ~ "Self-censorship", 
             sub_indicator == "b5" ~ "Information control and manipulation", 
             sub_indicator == "b6" ~ "Constraints on publishing", 
             sub_indicator == "b7" ~ "Lack diversity and reliability", 
             sub_indicator == "b8" ~ "Constraints on communities", 
             sub_indicator == "c1" ~ "Legal protections", 
             sub_indicator == "c2" ~ "Criminalised online activities",  
             sub_indicator == "c3" ~ "Individuals penalised", 
             sub_indicator == "c4" ~ "Restricted anonymous communication", 
             sub_indicator == "c5" ~ "State infringement of privacy", 
             sub_indicator == "c6" ~ "Data monitoring and retention", 
             sub_indicator == "c7" ~ "Extralegal intimidation", 
             sub_indicator == "c8" ~ "Cyberattacks",
             sub_indicator == "total_country_score" ~ "Country Score",
             sub_indicator == "a_obstacles_to_access" ~ 
               "Obstacles to access", 
             sub_indicator == "b_limits_on_content" ~ 
               "Limits on content", 
             sub_indicator == "c_violations_of_user_rights" ~ 
               "Violations of user rights", 
             TRUE ~ sub_indicator
           )) |>
  mutate(sub_index_group = 
           case_when(
             str_detect(sub_indicator, "a[0-9]") ~ "Obstructions to access", 
             str_detect(sub_indicator, "b[0-9]") ~ "Limits on content", 
             str_detect(sub_indicator, "c[0-9]") ~ "Violation of user rights", 
             TRUE ~ "aggregation"
           )) |> 
  filter(!is.na(score)) 

net_freedom_filtered |> write_csv(here("data", "net_freedom_filtered.csv"))
```

```{r}
net_freedom_filtered |> filter(is.na(sub_index_group))
```


```{r}
viridis_pal(option = "turbo")(9) |> show_col()
```



```{r}
net_freedom_filtered |> count(sub_indicator_text)

net_freedom_filtered |> 
  filter(year < 2019)



net_freedom |> filter(year < 2019)
```

```{r}


net_freedom_map <- net_freedom |> 
  filter(country %in% country_list) |> 
  select(country, year, total_country_score) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  mutate(freedom_status = case_when(
    total_country_score <= 39 ~ "Not free",
    total_country_score > 39 & total_country_score <= 69 ~ "Partly free",
    total_country_score > 39 ~ "Free"))

net_freedom_map |> write_csv(here("data", "net_freedom_map.csv"))

net_freedom_map |> 
  left_join(world_shape, 
             by = c("country_iso" = "iso3")) |> 
  st_as_sf() |> 
  ggplot() + 
  geom_sf(size = .1, colour = "grey", 
          aes(fill = total_country_score)) 
  coord_sf(xlim = c("37", "135"), 
                  ylim = c("-35", "60"),lims_method = "geometry_bbox")
  

```


```{r}
net_freedom_charts <- net_freedom |> 
  filter(country %in% country_list) |> 
  pivot_longer(cols = a1:total_country_score, 
               names_to = "sub_indicator", 
               values_to = "score") |> 
  mutate(sub_indicator_text =
           case_when(
             sub_indicator == "a1" ~ "Infrastructural limitations", 
             sub_indicator == "a2" ~ "Internet accesibility",
             sub_indicator == "a3" ~ "Government restrictions", 
             sub_indicator == "a4" ~ "Service provider diversity", 
             sub_indicator == "a5" ~ "Regulatory failure", 
             sub_indicator == "b1" ~ "Blocked content", 
             sub_indicator == "b2" ~ "Forced content deletion", 
             sub_indicator == "b3" ~ "Opaque, unacccountable procedures", 
             sub_indicator == "b4" ~ "Self-censorship", 
             sub_indicator == "b5" ~ "Information control and manipulation", 
             sub_indicator == "b6" ~ "Constraints on publishing", 
             sub_indicator == "b7" ~ "Lack diversity and reliability", 
             sub_indicator == "b8" ~ "Constraints on communities", 
             sub_indicator == "c1" ~ "Legal protections", 
             sub_indicator == "c2" ~ "Criminalised online activities",  
             sub_indicator == "c3" ~ "Individuals penalised", 
             sub_indicator == "c4" ~ "Restricted anonymous communication", 
             sub_indicator == "c5" ~ "State infringement of privacy", 
             sub_indicator == "c6" ~ "Data monitoring and retention", 
             sub_indicator == "c7" ~ "Extralegal intimidation", 
             sub_indicator == "c8" ~ "Cyberattacks", 
             TRUE ~ sub_indicator
           )) |> 
  mutate(sub_index_group = 
           case_when(
             str_detect(sub_indicator, "a[0-9]") ~ "A. Obstructions to access", 
             str_detect(sub_indicator, "b[0-9]") ~ "B. Limits on content", 
             str_detect(sub_indicator, "c[0-9]") ~ "C. Violation of user rights", 
             TRUE ~ "aggregation"
           )) |> 
  filter(!is.na(score))
  
net_freedom_charts |> write_csv(here("data", "net_freedom_charts.csv"))

net_freedom_charts |> filter(!is.numeric(score))

net_freedom_charts |> filter(is.na(score))
```











## Displacement

```{r}
displacement <- read_csv(here("data", "displacement_data.csv")) |> 
  janitor::clean_names() |> 
  mutate(country_iso = countrycode(country, 
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  filter(year > 2007) |>
  pivot_wider(names_from = indicator_sub_type, 
              values_from = sum_of_value) |> 
  janitor::clean_names() |>
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0)) |> 
  mutate(total_displacement = 
           disaster_new_displacement + 
           conflict_stock_displacement +
           conflict_new_displacement) |> 
  left_join(population_estimates |> 
              filter(year %in% c(2017, 2018, 2019)), 
            by = c("country", "year")) |>
  mutate(disaster_per_100k = disaster_new_displacement / population * 100000, 
         conflict_per_100k = (conflict_stock_displacement +
                                  conflict_new_displacement) / population * 100000, 
         total_displacement_100k = total_displacement / population * 100000, 
         conflict_subtotal_displacement = 
           conflict_stock_displacement + conflict_new_displacement)  %>%
  mutate_at(vars(disaster_per_100k,
                 conflict_per_100k, 
                 total_displacement_100k), 
            ~ round(., digits = 6)) |> 
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0, 
                  population = 0, 
                  disaster_per_100k = 0, 
                  conflict_per_100k = 0, 
                  total_displacement = 0, 
                  total_displacement_100k = 0, 
                  conflict_subtotal_displacement = 0)) 

displacement |> write_csv(here("data", "displacement_per_capita.csv"))

```

```{r}
displacement |> filter(!is.na(conflict_per_100k))

displacement |> filter(year == 2019)

displacement |> filter()
```


## IDMC

```{r}
idmc <- read_excel(here("data", "IDMC_Internal_Displacement_Conflict-Violence_Disasters.xlsx")) |> 
  clean_names() |> 
  rename(country = name) |> replace_na(list(distaster_stock_displacement_raw = 0, 
                        conflict_stock_displacement_raw = 0)) |> 
  mutate(total_displacement = disaster_stock_displacement_raw +  conflict_stock_displacement_raw) |> 
  left_join(population_estimates |> 
              mutate(country = case_when(
    country == "Brunei Darussalam" ~ "Brunei", 
    country == "North Korea" ~ "Dem. People's Rep. Korea", 
    country == "Laos" ~ "Lao PDR", 
    country == "Macao SAR, China" ~ "Macao, China", 
    country == "Micronesia, Fed. Sts." ~ "Micronesia", 
    country == "Vietnam" ~ "Viet Nam",
    country == "Hong Kong" ~ "Hong Kong, China", 
    TRUE ~ country
  )),
  by = c("country", "year")) |> 
  mutate(disaster_per_100k = disaster_stock_displacement_raw / population * 100000, 
         conflict_per_100k = conflict_stock_displacement_raw / population * 100000, 
         total_displacement_per_100k = total_displacement / population * 100000) |> 
  mutate_at(vars(disaster_per_100k,
                 conflict_per_100k, 
                 total_displacement_per_100k), 
            ~ round(., digits = 6)) |> 
  replace_na(list(disaster_stock_displacement_raw = 0, 
                  conflict_stock_displacement_raw = 0, 
                  total_displacement = 0, 
                  total_displacement_per_100k = 0, 
                  population = 0)) 

idmc |> write_csv(here("data", "idmc.csv"))
```

```{r}
idmc |> count(year)
```



```{r}
idmc <- 



filter(year > 2007) |>
  pivot_wider(names_from = indicator_sub_type, 
              values_from = sum_of_value) |> 
  janitor::clean_names() |>
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0)) |> 
  mutate(total_displacement = 
           disaster_new_displacement + 
           conflict_stock_displacement +
           conflict_new_displacement) |> 
  left_join(population_estimates |> 
              filter(year %in% c(2017, 2018, 2019)), 
            by = c("country", "year")) |>
  mutate(disaster_per_100k = disaster_new_displacement / population * 100000, 
         conflict_per_100k = (conflict_stock_displacement +
                                  conflict_new_displacement) / population * 100000, 
         total_displacement_100k = total_displacement / population * 100000, 
         conflict_subtotal_displacement = 
           conflict_stock_displacement + conflict_new_displacement)  %>%
  mutate_at(vars(disaster_per_100k,
                 conflict_per_100k, 
                 total_displacement_100k), 
            ~ round(., digits = 6)) |> 
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0, 
                  population = 0, 
                  disaster_per_100k = 0, 
                  conflict_per_100k = 0, 
                  total_displacement = 0, 
                  total_displacement_100k = 0, 
                  conflict_subtotal_displacement = 0)) 

idmc |> count(year)
```


## Human rights defenders

```{r}

hrd <- read_csv(here("data", "Asia Forum HRD Data(Asia Forum HRD Data).csv")) |> 
  janitor::clean_names()
```


```{r}



hrd_violation_chart <- hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
   |>
  group_by(violation_long, country) |> 
  summarise(event_count = n_distinct(serial_number), 
            average_impact = mean(impact_of_event, na.rm = TRUE), 
            .groups = "drop")  
  write_csv(here("data", "hrd_violation_chart.csv"))
  

hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  separate(violation, sep = "\\|", remove = FALSE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) 
  group_by(violation_long, country) 
```


```{r}
hrd |> 
  filter(str_detect(date_added, "2023")) |> 
  filter(str_detect(rights_concerned, "Offline")) |> 
  sample_n(5) |> 
  pull(rights_concerned)
```


```{r}
hrd |> 
  separate(hrd, sep = "\\|", remove = FALSE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore",
               values_to = "hrd_long") |> 
  filter(!is.na(hrd_long)) |> 
  group_by(hrd_long) |> 
  summarise(
    event_count = n_distinct(serial_number), 
    total_impact = sum(impact_of_event, na.rm = TRUE),
    average_impact = mean(impact_of_event, na.rm = TRUE), 
    .groups = "drop") |> 
  write_csv(here("data", "hrd_victims_chart.csv"))
```

### HRD long



```{r}
hrd_long <- hrd |>
  # Revert to Asia forum, these 18 rows are missing key data
  # that needs to be encoded
  filter(!is.na(violation) | !is.na(rights_concerned) | !is.na(hrd)) |> 
  select(-source, -related_events) |> 
  mutate(initial_date = ifelse(is.na(initial_date), date_added, initial_date)) |> 
  separate(rights_concerned, sep = "\\|", remove = TRUE, 
           into = paste0("rights", 1:7)) |>
  pivot_longer(cols = rights1:rights7, 
               names_to = "ignore1", 
               values_to = "rights_long") |> 
  filter(rights_long %out% c("Offline", "Online")) |> 
  separate(violation, sep = "\\|", remove = TRUE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore2",
               values_to = "violation_long") |> 
  separate(hrd, sep = "\\|", remove = TRUE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore3",
               values_to = "hrd_long") |> 
  filter(!is.na(hrd_long) | !is.na(rights_long) | !is.na(violation_long)) |> 
  select(-c(ignore1, ignore2, ignore3)) |> 
  distinct(serial_number, country, initial_date, summary_for_publications, 
           rights_long, violation_long, hrd_long) |> 
  # mutate(perpetrator_type = 
  #          case_when(
  #            !is.na(perpetrator_state) & is.na(perpetrator_non_state) ~ 
  #              "State", 
  #            !is.na(perpetrator_non_state) & is.na(perpetrator_state) ~ 
  #              "non-State", 
  #            !is.na(perpetrator_non_state) & !is.na(perpetrator_state) ~ 
  #              "State and non-State", 
  #            TRUE ~ "Unknown")) |> 
  replace_na(list(final_date = ""))

# writexl::write_xlsx(hrd_long, here("data", "hrd_long.xlsx"))



```

```{r}
hrd_long |> 
  group_by(rights_long, violation_long, hrd_long) |> 
  summarise(count = n_distinct(serial_number), 
            .groups = "drop") |> 
  mutate(concat = paste0(rights_long, ", ", violation_long, ", ", hrd_long), 
         concat = str_trim(str_replace_all(concat, "NA", ""))) |> 
  arrange(desc(count)) |> 
  view()
```


```{r}

set.seed(47)

hrd_long |> 
  filter(violation_long == "(Arbitrary) Arrest and Detention" & 
           is.na(rights_long) & is.na(hrd_long)) |> 
  sample_n(5) |> 
  pull(summary_for_publications)
```

### HRD network graph

```{r}
hrd_long |> 
  filter(hrd_long == "Media Worker") |> 
  sample_n(5) |> 
  pull(summary_for_publications)

set.seed(33444)

hrd_long |> 
  pivot_longer(cols = c(rights_long, violation_long, hrd_long), 
               names_to = "type", 
               values_to = "event_tag") |> 
  filter(!is.na(event_tag)) |> 
  distinct(serial_number, event_tag) |>
  add_count(event_tag) |> 
  pairwise_cor(event_tag, serial_number, sort = TRUE) |> 
  left_join(
    hrd_long |>
      pivot_longer(
        cols = c(rights_long, violation_long, hrd_long),
        names_to = "type",
        values_to = "event_tag"
      ) |>
      filter(!is.na(event_tag)) |>
      distinct(serial_number, event_tag) |>
      add_count(event_tag) |>
      pairwise_count(event_tag, serial_number, sort = TRUE), 
    by = c("item1", "item2")
  ) |> 
  filter(correlation >= .1 & n > 10) |> 
  filter(item1 != "Academic" & item2 != "Academic") |> 
  igraph::graph_from_data_frame() %>% 
  ggraph(layout = "kk") + 
  geom_edge_link(aes(alpha = correlation,
                     edge_width = n), 
                 colour = "blue", 
                 lineend = "round",
                 check_overlap = TRUE) + 
  scale_alpha_continuous(range = c(0.1, 0.4)) +
  geom_node_point(colour = "blue", alpha = 0.3) +
  geom_node_text(aes(label = name), size = 3.5)

ggsave(here("plots", "hrd_network_graph.png"), 
       width = 42.0, height = 29.7, units = "cm", dpi = 300)


```








#### Perpetrators

```{r}
hrd |>
 select(-source, -related_events) |> 
 separate(perpetrator_non_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_non_state", 1:2)) |> 
  filter(!is.na(perp_non_state2)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore5",
               values_to = "perp_non_state_long") |> 
  filter(!is.na(perp_state_non_long)) |> 
  mutate(perpetrator = str_trim(paste0(perpetrator_state, 
                                       "and ", 
                                       perpetrator_non_state)),
         perpetrator_type = 
           case_when(
             perpetrator_non_state == "" & perpetrator_state != "" ~ 
               "State",
             perpetrator_non_state != "" & perpetrator_state == "" ~
               "non-State",
             perpetrator_non_state != "" & perpetrator_state != "" ~
               "State and non-State", 
             TRUE ~ "Unknown"
         ))
  
```



```{r}
hrd |> 
  filter(is.na(perpetrator_state) & is.na(perpetrator_non_state)) 
```

```{r eval = FALSE}

# Deprecated -- return once you know what to do with the perpetrator data 

hrd |>
  # Revert to Asia forum, these 18 rows are missing key data
  # that needs to be encoded
  filter(!is.na(violation) | !is.na(rights_concerned) | !is.na(hrd))
  select(-source, -related_events) |> 
  separate(rights_concerned, sep = "\\|", remove = TRUE, 
           into = paste0("rights", 1:7)) |>
  pivot_longer(cols = rights1:rights7, 
               names_to = "ignore1", 
               values_to = "rights_long") |> 
    filter(!is.na(rights_long) & 
           rights_long %out% c("Offline", "Online")) |> 
  separate(violation, sep = "\\|", remove = TRUE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore2",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) |> 
  separate(hrd, sep = "\\|", remove = TRUE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore3",
               values_to = "hrd_long") |> 
  separate(perpetrator_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_state", 1:4)) |> 
  pivot_longer(cols = perp_state1:perp_state4,
               names_to = "ignore4",
               values_to = "perp_state_long") |> 
  separate(perpetrator_non_state, sep = "\\|", remove = TRUE, 
           into = paste0("perp_non_state", 1:2)) |> 
  pivot_longer(cols = perp_non_state1:perp_non_state2,
               names_to = "ignore5",
               values_to = "perp_non_state_long") |> 
  select(-c(ignore1, ignore2, ignore3, ignore4, ignore5)) 
  replace_na(list(imapct_of_event = 0, 
                  initial_date = "", 
                  final_date = "", 
                  perpetrator_state = "", 
                  perpetrator_non_state = "")) |> 
  mutate(perpetrator = str_trim(paste0(perpetrator_state, 
                                       "and ", 
                                       perpetrator_non_state)),
         perpetrator_type = 
           case_when(
             perpetrator_non_state == "" & perpetrator_state != "" ~ 
               "State",
             perpetrator_non_state != "" & perpetrator_state == "" ~
               "non-State",
             perpetrator_non_state != "" & perpetrator_state != "" ~
               "State and non-State", 
             TRUE ~ "Unknown"
         ), 
         perpetrator = ifelse(perpetrator_type %in% 
                                c("State", "no-State", "Unknown"), 
                              str_replace_all(perpetrator, "and", ""), 
                              perpetrator
                              ), 
         perpetrator = str_trim(perpetrator))

hrd_long |> write_csv(here("data", "hrd_long.csv"))

hrd_long |> count(perpetrator)


hrd_long |> glimpse()

hrd_long |> filter(is.na(perp_state_long) & is.na(perp_non_state_long)) 
```











## Migration 

```{r}
aggregation_list <- c("AFRICA",
"ASIA",
"Central and Southern Asia",
"Central America",
"Central Asia",
"EUROPE",			
"Eastern Africa",	
"Eastern Asia",	
"Eastern Europe",	
"Eastern and South-Eastern Asia",
"High-income countries",
"LATIN AMERICA AND THE CARIBBEAN",
"Land-locked Developing Countries (LLDC)",	
"Latin America and the Caribbean",
"Least developed countries",
"Less developed regions",		
"Less developed regions, excluding China",
"Less developed regions, excluding least developed countries",
"Low-income countries",		
"Lower-middle-income countries",
"Middle-income countries",
"Middle Africa",
"NORTHERN AMERICA",
"Northern Africa",		
"Northern Africa and Western Asia",		
"Northern Europe",
"OCEANIA",
"Oceania (excluding Australia and New Zealand)",
"Small island developing States (SIDS)",
"Sub-Saharan Africa",
"Upper-middle-income countries",
"Western Africa",		
"Western Asia",		
"Western Europe",			
"Western Sahara",
"WORLD", 
"Australia and New Zealand", 
"Europe and Northern America", 
"Developed regions", 
"South-Eastern Asia", 
"Southern Asia", 
"Southern Europe",
"Caribbean",
"South America",
"Other",
"Southern Africa",
"Melanesia",
"Micronesia",
"Polynesia")
```


```{r warning=FALSE}


migrant <- read_excel(here("data", "undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx"), 
           sheet = 2, 
           skip = 8) |> 
  janitor::clean_names() |>
  pivot_longer(cols = 8:28, 
               names_to = "name", 
               values_to = "value") |> 
  mutate(name = str_replace(name, "x", ""))|> 
  mutate(sex = case_when(
    name %in% c("1990_8", "1995_9", "2000_10", "2005_11", 
                "2010_12", "2015_13", "2020_14") ~ "total", 
    name %in% c("1990_15", "1995_16", "2000_17", "2005_18", 
                "2010_19", "2015_20", "2020_21") ~ "male", 
    name %in% c("1990_22", "1995_23", "2000_24", "2005_25", 
                "2010_26", "2015_27", "2020_28") ~ "female",
    TRUE ~ "wrong"
  )) |> 
  mutate(year = as.numeric(str_sub(name, start = 1L, end = 4L))) |>
  rename(area_of_destination = region_development_group_country_or_area_of_destination, 
         area_of_origin = region_development_group_country_or_area_of_origin) %>%
  mutate_at(vars(area_of_destination, area_of_origin), 
            .funs = ~str_replace_all(., "\\*", "")) |> 
  mutate(aggregation = ifelse(
    area_of_origin %in% aggregation_list | 
      area_of_destination %in% aggregation_list, 
    "yes", "no"
  )) %>% 
  mutate_at(vars(area_of_destination, 
                 area_of_origin), 
            .funs = ~case_when(
                . == "China, Hong Kong SAR" ~ "Hong Kong", 
                . == "Dem. People's Republic of Korea" ~ "North Korea", 
                . == "Iran (Islamic Republic of)" ~ "Iran", 
                . == "Lao People's Democratic Republic" ~ "Laos", 
                . == "Republic of Korea" ~ "South Korea",
                . == "Viet Nam" ~ "Vietnam", 
                TRUE ~ .
              ))
  
```



```{r}
migrant |> 
  filter(aggregation == "no") |> 
  select(-name) |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total") |> 
```

```{r}
migrant |> glimpse()

migrant |> count(sex)
```


#### Keep working on this
```{r}
migrant_filtered <- migrant |> 
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex != "total" & 
           year %in% c(2000, 2005, 2010, 2015, 2020)) |> 
  group_by(area_of_origin, area_of_destination, year, sex) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |>
  mutate(origin_iso = countrycode(area_of_origin,
                                  origin = "country.name", 
                                   destination = "iso3c"), 
         destination_iso = countrycode(area_of_destination, 
                                       origin = "country.name", 
                                       destination = "iso3c")) |> 
   left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2005, 2010, 2015, 2020)) |>
      select(origin_population = population, 
             year, 
             country_iso), 
    by = c("origin_iso" = "country_iso", "year")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2005, 2010, 2015, 2020)) |>
      select(destination_population = population, 
             year, 
             country_iso), 
    by = c("destination_iso" = "country_iso", "year")) |> 
  filter(!is.na(destination_population) & !is.na(origin_population) & 
           migrants > 0) |> 
  filter(area_of_origin %in% country_list)
  
migrant_filtered |> write_csv(here("data", "migrant2000_2020.csv"))

population_estimates |> count(year)

migrant_filtered |> glimpse()
```

```{r}
viridis_pal(option = "turbo")(8) |> show_col()
```

### migrant stock changes

```{r}
migrant_stock_changes <- migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex != "total") |> 
  group_by(area_of_origin, area_of_destination, year, sex) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(names_from = "year", 
              values_from = "migrants", 
              values_fill = 0, 
              names_prefix = "migrants_") |> 
  mutate(origin_iso = countrycode(area_of_origin,
                                  origin = "country.name", 
                                   destination = "iso3c"), 
         destination_iso = countrycode(area_of_destination, 
                                       origin = "country.name", 
                                       destination = "iso3c")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "origin_population_") |> 
      select(-country), 
    by = c("origin_iso" = "country_iso")) |> 
  left_join(
    population_estimates |> 
      filter(year %in% c(2000, 2010, 2015, 2020)) |>
      pivot_wider(names_from = year, 
              values_from = population, 
              names_prefix = "destination_population_") |> 
      select(-country), 
    by = c("destination_iso" = "country_iso")) |>  
  # Filtered small origin-destination pairs with small island territories without population data
  # 9 rows total, minimal
  filter(!is.na(origin_population_2020) & !is.na(destination_population_2020))

```


```{r}
migrant_stock_changes |> write_csv(here("data", "migrant_stock_changes.csv"))
```


```{r}
migrant_stock_changes <- read_csv(here("data", "migrant_stock_changes.csv"))

migrant_stock_changes |> 
  filter(migrants_2020 > 100) |> 
  write_csv(here("data", "migrant_stock_changes_100.csv"))
  ggplot(aes(x = migrants_2020)) + 
  geom_histogram() + 
  scale_x_log10()
```





### Migrants by origin 

```{r}
migrant_filtered |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants = sum(migrants)[year == 2020]) |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |>
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) 
```


```{r}
migrant_stock_changes |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants_2020 = sum(migrants_2020)) |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |> 
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  mutate(total_migrants_sort = sum(migrants_2020), 
         total_migrants_pc = total_migrants_sort / origin_population_2020) |> 
  
  ungroup() |> 
  mutate(area_of_origin = fct_reorder(area_of_origin, total_migrants_pc), 
         sex = str_to_title(sex)) |> 
  ggplot(aes(x = migrants_2020, y = area_of_origin)) + 
  geom_col(aes(fill = migrants_pc)) +
  geom_text(aes(label = comma(migrants_2020)), 
            size = 3, 
            hjust = "inward") + 
  scale_fill_viridis(direction = -1, end= .95) +
  scale_x_continuous(labels = number_format(scale = 1 / 1000000, suffix = "M")) + 
  facet_row(vars(sex), scales = "free_x", space = "free") + 
  labs(title = "Number of persons who migrated, by country of origin, 2020", 
       subtitle = "Colour shows % of country population have migrated", 
       fill = "% Migrated", 
       y = "", 
       x = "Number of migrants 2020", 
       caption = "Source: International Migrant Stock 2020") + 
  theme(legend.position = c(.9, .7), 
        strip.background = element_rect(fill = "black"))
```

```{r}
ggsave(here("plots", "migration_barchart_origin.png"), 
       height = 250, 
       width = 210, 
       units = "mm")
```

```{r}
migrant_bars <- migrant_stock_changes |> 
  group_by(area_of_origin, sex) |> 
  summarise(origin_population_2020 = mean(origin_population_2020), 
            migrants_2020 = sum(migrants_2020),
            .groups = "drop") |> 
  mutate(migrants_pc = migrants_2020 / origin_population_2020 * 100) |> 
  arrange(desc(migrants_pc)) |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  mutate(total_migrants_sort = sum(migrants_2020), 
         total_migrants_pc = total_migrants_sort / origin_population_2020) |> 
  
  ungroup() |> 
  mutate(area_of_origin = fct_reorder(area_of_origin, total_migrants_pc), 
         sex = str_to_title(sex)) |> 
  ggplot(aes(x = migrants_2020, y = area_of_origin, 
             text = paste0("Origin: ", area_of_origin, "\n", 
                           "Migrants: ", comma(migrants_2020), "\n", 
                           "% Migrated: ", round(migrants_pc, digits = 2)))) + 
  geom_col(aes(fill = migrants_pc)) +
  scale_fill_viridis(direction = -1, end= .95) +
  scale_x_continuous(labels = number_format(scale = 1 / 1000000, suffix = "M")) + 
  facet_row(vars(sex), scales = "free_x", space = "free") + 
  labs(title = "Number of persons who migrated, by country of origin, 2020",  
       fill = "% Migrated", 
       y = "", 
       x = "Number of migrants 2020", 
       caption = "Source: International Migrant Stock 2020") + 
  theme(legend.position = c(.9, .7), 
        strip.background = element_rect(fill = "black"),
        legend.title = element_text(size = 7), 
        legend.text = element_text(size = 6), 
        legend.key.width = unit(.33, "cm"))
   
ggplotly(migrant_bars, tooltip = c("text")) |> 
   config(diplayModeBar = FALSE) 

```

```{r}
ggsave(here("plots", "migration_barchart_origin.png"), 
       height = 250, 
       width = 210, 
       units = "mm")
```


### Migrant network graph 

```{r}
viridis_pal(option = "plasma")(3) |> show_col()

viridis_pal()(5) |> show_col()
```


```{r}

set.seed(2243)

migrant_stock_changes |> 
  select(area_of_origin, area_of_destination, sex, migrants_2020, origin_population_2020) |> 
  pivot_wider(names_from = "sex", 
              values_from = "migrants_2020", 
              values_fill = 0) |> 
  mutate(total_migrants_2020 = male + female, 
         sex_ratio = round((male / 100) /(female / 100)), 
         sex_ratio = ifelse(is.infinite(sex_ratio), 0, sex_ratio), 
         sex_ratio = ifelse(is.nan(sex_ratio), 0, sex_ratio)) |> 
  arrange(desc(sex_ratio)) |> 
  filter(sex_ratio != 0) |> 
  mutate(n = 1,
         origin_population_pc = round(total_migrants_2020 / origin_population_2020 * 100, 
                                      digits = 2)) |> 
  filter(total_migrants_2020 > 100000 | origin_population_pc > 3) |> 
  igraph::graph_from_data_frame() |> 
  ggraph(layout = "circle") + 
  geom_edge_link(aes(edge_width = total_migrants_2020, 
                     alpha = origin_population_pc, 
                     edge_colour = sex_ratio, 
                     colour = sex_ratio),
                 lineend = "round",
                 check_overlap = TRUE) + 
  scale_edge_colour_gradient2(low = "#5DC863FF", mid = "#F58C46FF", high = "#0D0887FF", midpoint = 1,
                              trans = "log10") +
  scale_edge_width_continuous(range = c(.1, 7), 
                              labels = number_format(scale = 1 / 1000000, 
                                                     suffix = "M"), 
                              breaks = c(500000, 1000000, 2000000, 3000000)) + 
  scale_alpha_continuous(range = c(.5, 1)) +
  geom_node_point(alpha = 0.1) +
  geom_node_text(aes(label = name), size = 3) + 
  labs(title = "Origins and destinations of Asia-Pacific migrants in 2020", 
       subtitle = "Thickness of line indicates number of migrants, trasparency indicates % of origin population migrated,\nSex ratio is # of males per 100 females. Only displaying the top origin-destination pairs", 
       caption = "Source: International Migrant Stock 2020", 
       edge_width = "No. Migrants", 
       edge_colour = "Sex ratio", 
       edge_alpha = "% Migrated") + 
  theme(legend.key.size = unit(.48, "cm"), 
        legend.title = element_text(size = 8), 
        legend.text = element_text(size = 7), 
        plot.subtitle = element_text(size = 10), 
        plot.title = element_text(size = 11)) 
```

```{r}
ggsave(here("plots", "migration_network_graph.png"), 
       units = "mm", 
       height = 210, 
       width = 297)
```



```{r}
migrant_stock_changes |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  summarise(migrants_2020 = sum(migrants_2020)) |> 
  arrange(desc(migrants_2020)) |> 
  mutate(category = case_when(
           migrants_2020 > 3000000 ~ "big", 
           migrants_2020 <= 3000000 & migrants_2020 > 300000 ~ "medium", 
           migrants_2020 <= 300000 ~ "small"
         )) 
  select(area_of_origin, category)
 

```

```{r}

migrant_stock_changes |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin) |> 
  summarise(migrants_1990 = sum(migrants_1990), 
            migrants_1995 = sum(migrants_1995),
            migrants_2000 = sum(migrants_2000), 
            migrants_2010 = sum(migrants_2010), 
            migrants_2015 = sum(migrants_2015), 
            migrants_2020 = sum(migrants_2020)) |> 
  pivot_longer(cols = migrants_1990:migrants_2020, 
               names_to = "year", 
               values_to = "value") |> 
  mutate(year = str_remove_all(year, "migrants_"), 
         year = as.double(year), 
         label = ifelse(year %in% c(2020, 1990), area_of_origin, "")) |> 
  left_join(
    migrant_stock_changes |>
      group_by(area_of_origin) |>
      summarise(migrants_2020 = sum(migrants_2020)) |>
      arrange(desc(migrants_2020)) |>
      mutate(
        category = case_when(
          area_of_origin %in% c("India", "China", "Bangladesh", "Pakistan", "Philippines", 
                                "Afghanistan","Indonesia", "Myanmar", "Vietnam") ~ 
            ">3 million migrants", 
          area_of_origin %in% c("Nepal", "South Korea", "Sri Lanka", "Malaysia", 
                                "Iran", "Laos", "Cambodia", "Thailand", "Hong Kong") ~
            "300,000-3 million", 
          area_of_origin %in% c("Fiji", "North Korea", "Mongolia", "Bhutan", 
                                "Timor-Leste", "Vanuatu", "Papua New Guinea", 
                                "Solomon Islands", "Maldives") ~ 
            "<=300,000 migrants")) |>
      select(area_of_origin, category), 
    by = "area_of_origin"
  ) |> 
  ggplot(aes(x = year, y = value)) + 
  geom_line(aes(colour = area_of_origin), 
            size = .6) + 
  ggrepel::geom_text_repel(aes(label = label), 
            size = 1.5) +
  scale_y_log10(labels = comma) + 
  theme(legend.position = "none", 
        strip.background = element_rect(fill = "black")) +
  facet_wrap(~ fct_relevel(category, 
                           c("<=300,000 migrants",
                              "300,000-3 million", 
                             ">3 million migrants in 2020")), 
             ncol = 1, scales = "free_y") + 
  labs(title = "Changes in number of persons migrated by area of origin, 1990-2020", 
       subtitle = "Source: International Migrant Stock", 
       y = "",
       x = "")


migrant |> 
  filter(area_of_origin %in% country_list) |> 
  group_by(area_of_origin, )
  
  glimpse()
```



```{r}
migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total" & year == 2020) |> 
  group_by(area_of_origin, area_of_destination, year) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  group_by(area_of_destination) |> 
  summarise(migrants = sum(migrants, na.rm = TRUE)) |> 
  arrange(desc(migrants))
```




```{r}
migrant |> 
```



## VDEM

```{r}
country_list 

library(vdemdata)

vdem_export <- vdem |> 
  filter(country_name %in% country_list) |> 
  select(country_name, year, matches("v2x"), 
         -matches("sd|codehigh|codelow")) |> 
  select(country_name, year, v2x_polyarchy:v2x_egaldem) |> 
  pivot_longer(cols = c(v2x_polyarchy:v2x_egaldem), 
               names_to = "index", 
               values_to = "value") |> 
  mutate(index_text = 
           case_when(
             index == "v2x_polyarchy" ~ "Electoral democracy index", 
             index == "v2x_libdem" ~ "Liberal democracy index",
             index == "v2x_partipdem" ~ "Participatory democracy index",
             index == "v2x_delibdem" ~ "Deliberative democracy index",
             index == "v2x_egaldem" ~ "Egalitarian democracy index", 
             TRUE ~ index
           ))

vdem |> write_csv(here("data", "vdem_export.csv"))
```


```{r}

vdem |> 
  mutate(country_name = ifelse(country_name == "Burma/Myanmar", 
                               "Myanmar", 
                               country_name)) |>
  filter(country_name %in% country_list) |> 
  select(country_name, 
         year, 
         v2x_polyarchy,
         v2x_libdem, 
         v2x_partipdem, 
         v2x_delibdem, 
         v2x_egaldem 
         )
```



## Corruption Perceptions Index

```{r}
country_list
```


```{r}
cpi <- read_excel(here("data", "CPI2023_Global_Results__Trends.xlsx"), 
           sheet = "CPI Historical (internal)", 
           skip = 3) |> 
  # Not enough rows
  select(-`Transparency International Bribe Payers Survey`) |> 
  pivot_longer(
    cols = c(`African Development Bank CPIA`:`World Justice Project Rule of Law Index`,
             `CPI score`), 
    names_to = "index", 
    values_to = "value"
  ) |> 
  filter(!is.na(value)) |> 
  clean_names() |> 
  rename(country = country_territory) |> 
  filter(country %in% country_list)


cpi |> write_csv(here("data", "cpi_long.csv"))

cpi |> skimr::skim()
```


```{r}
cpi |> 
  filter(country %in% country_list) |> 
  filter(country == "Bangladesh") |> 
  ggplot(aes(x = year, y = value, group = index)) + 
  geom_line() + 
  facet_wrap(~index)
  glimpse()
```


## Maldives 

### Maldives data



```{r}
maldives <- read_excel(here("data", "Maldives Combined Datasets-Cleaned.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(administration = case_when(
    administration == "Administrative Islands & Non-administrative Islands" ~ 
      "Administrative & Non-administrative Islands", 
    administration == "Non Administrative Islands" ~ 
      "Non-administrative Islands", 
    TRUE ~ administration
  )) |> 
  mutate(atoll_official = case_when(
    atoll_official == "GNAVIYANI Atoll" ~ "Gnaviyani Atoll", 
    atoll_official == "LHAVIYANI Atoll" ~ "Lhaviyani Atoll", 
    atoll_official == "Male'|Male" ~ "Greater Male Region", 
    atoll_official == "NOONU Atoll" ~ "Noonu Atoll", 
    TRUE ~ atoll_official
  )) |> 
  mutate(atoll_local_names = 
           case_when(
             atoll_local_names == "Kaafu Atoll" ~ "Kaafu (K)", 
             TRUE ~ atoll_local_names
           )) |> 
  naniar::replace_with_na(list(
    island = "NA", 
    administration = "NA", 
    population = "NA"
  )) |> 
  mutate(island_correct = 
           case_when(
             island == "Bandidhoo" & atoll_official == "Dhaal Atoll" ~ "Badidhoo", 
             island == "Bilehdhoo" & atoll_official == "Faafu Atoll" ~ "Biledhdhoo", 
             island == "Dhanbidhoo" & atoll_official == "Laamu Atoll" ~ "Dhabidhoo", 
             island == "Faresmaathodaa" & atoll_official == "Gaaf Dhaal Atoll" ~ "Fares-Maathodaa", 
             island == "Fiyoaree" & atoll_official == "Gaaf Dhaal Atoll" ~ "Fiyoari", 
             island == "Hangnameedhoo" & atoll_official == "Alif Dhekunu Buri" ~ "Hanghghaameedhoo",
             island == "Henbadhoo" & atoll_official == "Noonu Atoll" ~ "Hebadhoo", 
             island == "Himendhoo" & atoll_official == "Alif Uthuru Buri" ~ "Himandhoo",
             island == "Hinmafushi" & atoll_official == "Kaafu Atoll" ~ "Himmafushi", 
             island == "Kedhikulhudhoo" & atoll_official == "Noonu Atoll" ~ "Kedhikolhudhoo",
             island == "Kalaidhoo" & atoll_official == "Laamu Atoll" ~ "Kalhaidhoo",
             island == "Kulhudhuffushi City" & atoll_official == "Haa Dhaal Atoll" ~ "Kalhaidhoo",
             island == "Kuribi" & atoll_official == "Haa Dhaal Atoll" ~ "Kurinbi",
             island == "Maaenboodhoo" & atoll_official == "Dhaal Atoll" ~ "Maaeboodhoo",
             island == "Maalhos" & atoll_official == "Alif Uthuru Buri" ~ "Maalhoss",
             island == "Maradhoo Feydhoo" & atoll_official == "Seenu Atoll" ~ "Maradhoo-Feydhoo",
             island == "Nadellaa" & atoll_official == "Gaaf Dhaal Atoll" ~ "Nadallaa",
             island == "Nolhivaranfaru" & atoll_official == "Haa Dhaal Atoll" ~ "Nolhivaramfaru",
             island == "Thuraakunu" & atoll_official == "Haa Alif Atoll" ~ "Thurakunu",
             island == "Dhagethi" & atoll_official == "Alif Dhekunu Buri" ~ "Dhangethi",
             island == "Kunburudhoo" & atoll_official == "Alif Dhekunu Buri" ~ "Kunburudhoo",
             island == "dharanboodhoo" & atoll_official == "Faafu Atoll" ~ "Dharaboodhoo",
             island == "Vilingili" & atoll_official == "Gaaf Alif Atoll" ~ "Viligili",
             island == "Molhadhoo" & atoll_official == "Haa Alif Atoll" ~ "Mulhadhoo",
             island == "Inguraidhoo" & atoll_official == "Raa Atoll" ~ "Iguraidhoo",
             island == "Ungoofaaru" & atoll_official == "Raa Atoll" ~ "Ugoofaaru", 
             island == "Hulhudhoo	" & atoll_official == "Seenu Atoll" ~ "Hulhumeedhoo",
             island == "Kanditheemu" & atoll_official == "Shaviyani Atoll" ~ "Kaditheemu",
             island == "Kinbidhoo" & atoll_official == "Thaa Atoll" ~ "Kibidhoo",
             island %in% c("Nolhivaran", "Nolhivaramu") & 
               atoll_official == "Haa Dhaal Atoll" ~ "Nolhivaram",
             TRUE ~ island
           )) |> 
    mutate(population = ifelse(population == "Resident population", "Resident Population", population))

maldives_admin2 <- st_read(here("data", 
                         "mdv_admbnd_gov_20210329_shp", 
                         "mdv_admbnda_adm2_gov_20210329.shp"))

maldives_poverty <- read_excel(here("data", "Poverty Datasheet Maldives HIES 2019 (1).xlsx")) |> 
  janitor::clean_names() |> 
  slice(3:23) |> 
  rename(pc_below_poverty_line = percent_of_pop_below_national_poverty_line, 
         pc_national_poor = percent_of_national_poor) |> 
  naniar::replace_with_na(list(pc_below_poverty_line = "No data")) |> 
  mutate(pc_below_poverty_line = as.numeric(pc_below_poverty_line), 
         atoll = str_trim(atoll)) |> 
  pivot_longer(cols = c(pc_below_poverty_line, pc_national_poor), 
               names_to = "indicator", 
               values_to = "value") |> 
  mutate(atoll = case_when(
    atoll == "Lhaviyani ( (Lh)" ~ "Lhaviyani (Lh)", 
    TRUE ~ atoll
  )) |> 
  left_join(
    maldives |> 
      distinct(atoll_official, atoll_local_names) |> 
      mutate(atoll_local_names = str_trim(atoll_local_names)), 
    by = c("atoll" = "atoll_local_names")
  ) |> 
  mutate(atoll_official = case_when(
    atoll == "Greater Male Region" ~ "Greater Male Region", 
    str_detect(atoll, "Haa Alif") ~ "Haa Alif Atoll", 
    str_detect(atoll, "Gaafu Dhaalu") ~ "Gaaf Dhaal Atoll", 
    TRUE ~ atoll_official
  ), 
  indicator = case_when(indicator == "pc_below_poverty_line" ~ "% below poverty line", 
                        indicator == "pc_national_poor" ~ "% of poor persons nationally")) |> 
  rename(atoll_local_names = atoll)

atolls_official <- read_csv(here("data", "marwa_atolls.csv"))
```



### Maldives atoll indicator

```{r}
maldives_crimes <- maldives |> 
  filter(atoll_official %out% c("Industrial Islands", "Resorts")) |>
  filter(indicator %in% c("Cases Sent for Prosecution", 
                          "Economic and Financial Abuse", 
                          "Emotional Abuse", 
                          "Intimidating", 
                          "Investigated Cases", 
                          "Physical Abuse", 
                          "Sexual Abuse", 
                          "Sexual Harrasment", 
                          "Stalking", 
                          "Population", 
                          "Reported Crimes")) |> 
  group_by(atoll_official, atoll_local_names, indicator) |> 
  summarise(value = sum(value)) |>
  group_by(atoll_official, atoll_local_names) |> 
  mutate(population = ifelse(indicator == "Population", value, NA_integer_)) |> 
  fill(population, .direction = c("downup")) |> 
  ungroup() |> 
  filter(indicator != "Population") |> 
  mutate(value = value / population * 100000, 
         indicator = paste0(indicator, " per 100k")) |> 
  select(-population)

maldives_demographics <- maldives |> 
  filter(atoll_official %out% c("Industrial Islands", "Resorts")) |>
  filter(indicator %in% c("Child Population (0-17 yrs)",
                          "Youth Population (National) (18-35 yrs)",
                          "Working Age Population (15-64 yrs)",
                          "Elderly Population (65+ yrs)", 
                          "Adolescent Population (International) (10-19 yrs)",
                          "Population",
                          "Population density",
                          "Sex Ratio (males per 100 female)")) |> 
  group_by(atoll_official, atoll_local_names, indicator) |> 
  summarise(value = sum(value), 
            .groups = "drop")

maldives_economy <- maldives |>
      filter(atoll_official %out% c("Industrial Islands", "Resorts")) |>
      filter(indicator %in% c(
        "Aged-Dependency Ratio",
        "Child Dependency Ratio",
        "Combined rate of unemployment and potential labour force (%)",
        "Employment-to-population ratio (%)",
        "Inactivity rate (%)",
        "Dependency Ratio",
        "Employment-to-population ratio (%)",
        "Youth unemployment rate (15-24 years)",
        "Youth unemployment rate (18-35years)",
        "Labour force participation rate (%)",
        "Median age",
        "Growth Rate ( 2014 to 2022)",
        "Unemployment rate (%)", 
        "NEET rate (15-24 years) (%)", 
        "NEET rate (18-35 years) (%)"
      )) |> 
      group_by(atoll_official, atoll_local_names, indicator) |>
      summarise(value = mean(value, na.rm = TRUE), 
                .groups = "drop") 

maldives_atoll <- rbind(
  maldives_poverty, 
  maldives_economy, 
  maldives_demographics, 
  maldives_crimes
) |> 
  left_join(
    atolls_official |> 
      distinct(atoll_official = Atoll, atoll_official_name = `Atoll Official Name`), 
    by = "atoll_official"
  ) |> 
  group_by(indicator) |>
  mutate(range = range_wna(value)) |> 
  ungroup() |> 
  mutate(indicator2 = indicator, 
         value2 = value, 
         range2 = range) |> 
  select(
    atoll_official, 
    atoll_local_names,
    atoll_official_name,
    indicator, 
    value, 
    range, 
    indicator2, 
    value2, 
    range2
  ) 

  
```


```{r}
maldives_atoll |> 
  writexl::write_xlsx(here("data", "maldives_atoll_indicator2.xlsx"))
```





### Maldives islands 

```{r warning=FALSE, message=FALSE}

island_cols <- read_xlsx(here("data", "Atoll - Island-Level-Indicator-Sheet-Population Cleaned V1.xlsx"), 
          sheet = 1, 
          .name_repair = "unique_quiet") |> 
  slice(1:4) |> 
  clean_names()

island_colnames <- island_cols |> 
  pivot_longer(cols = everything(), 
               names_to = "ignore", 
               values_to = "dirty") |> 
  filter(!is.na(dirty)) |> 
  group_by(ignore) %>% 
  mutate(across(everything(), ~paste0(.,collapse = " "))) |> 
  slice(1) |> 
  ungroup() |> 
  mutate(order = parse_number(ignore)) |> 
  mutate(order = case_when(
    dirty == "Atoll" ~ 1,
    dirty == "Growth Rate (for Resident Maldivian Population - 2014 to 2022)" ~ 15, 
    TRUE ~ order), 
    dirty = ifelse(dirty == "* Area (in hectare)", 
                   "Area (in hectare)", dirty)) |> 
  arrange(order) |> 
  pull(dirty)
  
islands_atolls <- read_xlsx(here("data", "Atoll - Island-Level-Indicator-Sheet-Population Cleaned V1.xlsx"),
                             sheet = 1, 
                             skip = 7, 
                             col_names = island_colnames) |> 
  slice(1:186) |> 
  distinct(Atoll, island = Locality) |> 
  left_join(
    maldives |>
      mutate(Atoll = str_extract_all(atoll_local_names, "\\([^()]+\\)"),
             Atoll = str_remove_all(Atoll, "\\(|\\)")) |>
      filter(!is.na(island)) |>
      distinct(Atoll, island, atoll_official) |> 
      mutate(Atoll = case_when(Atoll == "ADh" ~ "Adh",
                               TRUE ~ Atoll), 
        island = case_when(island == "Mundhoo" ~ "Mundoo", 
                           island == "Madeveli" ~ "Madaveli", 
                           TRUE ~ island)),
    by = c("Atoll", "island")
  ) |> 
  arrange(atoll_official)
```




```{r}
islands <- read_xlsx(here("data", "Atoll - Island-Level-Indicator-Sheet-Population Cleaned V1.xlsx"),
                             sheet = 1, 
                             skip = 7, 
                             col_names = island_colnames) |> 
  slice(1:186) |> 
  rename(island = Locality) |> 
  left_join(
    islands_atolls, 
    by = c("island", "Atoll")
  ) |>  
  pivot_longer(cols = `Resident Population Both sexes`:`Median Age Resident Foreigners`, 
               names_to = "indicator_full", 
               values_to = "value") |>
  filter(!str_detect(indicator_full, "Resident Maldivians 2014")) |> 
  mutate(sex_modifier = 
           case_when(
             str_detect(indicator_full, "Both sexes") ~ "Both sexes", 
             str_detect(indicator_full, "Male") ~ "Male", 
             str_detect(indicator_full, "Female") ~ "Female", 
             TRUE ~ NA_character_
           ), 
         population_modifier = 
           case_when(
             str_detect(indicator_full, "Resident Population") ~ "Resident Population", 
             str_detect(indicator_full, "Resident Maldivian") ~ "Resident Maldivians", 
             str_detect(indicator_full, "Residnet Foreign") ~ "Resident Foreigners", 
             TRUE ~ NA_character_
           )) |> 
  left_join(
    atolls_official |> 
      distinct(atoll_official = Atoll, atoll_official_name = `Atoll Official Name`), 
    by = "atoll_official"
  ) |> 
  filter(!is.na(population_modifier)) |> 
  mutate(concat = paste0(island, ", ", atoll_official)) |> 
  filter(indicator_full %out% c("Median Age Resident Foreigners", 
                           "Resident Foreigners Population Both sexes")) |> 
  mutate(indicator = str_remove(indicator_full, "Resident Maldivian Population"), 
         indicator2 = indicator, 
         value2 = value) |> 
  mutate(index = case_when(
    is.na(sex_modifier) ~ "Demographic statistics", 
    TRUE ~ "Population counts"
  ))
```


```{r}
islands |> count(index, sex_modifier, population_modifier)

islands |> glimpse()
```

```{r}
islands |> 
  count(sex_modifier, population_modifier)   

islands |> filter(!is.na(sex_modifier)) |> count(indicator)

islands 
```



```{r}


islands |> 
  filter(indicator_full %in% c ("Median Age Resident Maldivians", "Population density Total Resident Population")) |>
  select(concat, indicator, value) |> 
  pivot_wider(names_from = indicator, values_from = value) |> 
  ggplot(aes(x = `Population density Total Resident Population`, y = `Median Age Resident Maldivians`)) + 
  geom_point()


  glimpse()
  glimpse()
  count(value)
  ggplot(aes(x = value)) + 
  geom_histogram()
```

```{r}
 islands |> 
  filter(indicator_full == "Resident Population Both sexes") |> 
  select(island, atoll_official, population = value) |>
  left_join(
    atolls_official |> 
      distinct(atoll_official = Atoll, `Atoll Official Name`), 
    by = c("atoll_official")
  ) |>
  rename(atoll_local_name = `Atoll Official Name`) |>
  mutate(concat = paste0(island, ", ", atoll_official)) |> 
  write_csv(here("data", "islands_pop.csv"))

islands |> count(indicator_full)

select(island, atoll_official, population = value) 

# island_pop 
maldives |> 
  filter(!is.na(island) & indicator == "Population") |> 
  group_by(island = island_correct, atoll_official) |> 
  summarise(population = sum(value), .groups = "drop") |> 
  mutate(concat = paste0(island, ", ", atoll_official)) |> 
  write_csv(here("data", "mal_island_population.csv"))
  filter(str_detect(indicator, "Population|population"))
```

```{r}

rbind(
  maldives_atoll |> 
  count(indicator) |> 
  mutate(admin_level = "Atoll"), 

islands |> 
  count(indicator) |> 
  mutate(admin_level = "Island")) |> 
  rename(observations = n) |> 
  write_csv(here("data", "maldives_indicator_list.csv"))
```



### Maldives write 

```{r}
islands |> writexl::write_xlsx(here("data", "islands_indicators1.xlsx"))

```


```{r}
maldives_at
```



```{r}

maldives_match <- read_excel(here("data", "List_Atolls & Islands.xlsx"), 
          .name_repair = "unique_quiet") |> 
  clean_names() |> 
  rename(atoll_official_name = official_atoll_name, 
         Atoll = x3)

```

```{r}
islands |> 
  filter(indicator_full == "Resident Maldivians Population Both sexes") |> 
  summarise(value = sum(value))
  glimpse()
```


```{r}
islands_atolls |> 
      mutate(Atoll = case_when(Atoll == "Adh" ~ "ADh",
                               TRUE ~ Atoll), 
        island = case_when(island == "Mundhoo" ~ "Mundoo", 
                           island == "Madeveli" ~ "Madaveli", 
                           TRUE ~ island)) |> 
  left_join(
    maldives_match |> 
      select(atoll_official_name, Atoll, atoll_alternate = atoll) |> 
      mutate(Atoll = str_trim(Atoll)), 
    by = c("Atoll")
  ) |> 
  distinct(Atoll, island, atoll_official, atoll_official_name, atoll_alternate) |> 
  write_csv(here("data", "maldives_match.csv"))

islands_atolls |> 
      mutate(Atoll = case_when(Atoll == "Adh" ~ "ADh",
                               TRUE ~ Atoll), 
        island = case_when(island == "Mundhoo" ~ "Mundoo", 
                           island == "Madeveli" ~ "Madaveli", 
                           TRUE ~ island)) |> 
  left_join(
    maldives_match |> 
      select(atoll_official_name, Atoll, atoll_alternate = atoll) |> 
      mutate(Atoll = str_trim(Atoll)), 
    by = c("Atoll")
  ) |> 
  distinct(Atoll, atoll_official, atoll_official_name, atoll_alternate) |> 
  write_csv(here("data", "maldives_atoll_match.csv"))
```


```{r}
maldives |> 
  mutate(Atoll = str_extract_all(atoll_local_names, "\\([^()]+\\)")[[1]], 
         Atoll = str_remove_all(Atoll, "\\(|\\)")) |> 
  filter(!is.na(island)) |> 
  distinct(Atoll, island)
  
  str_extract_all(j, "\\([^()]+\\)")[[1]]
  
maldives |> 
  mutate(Atoll = str_extract_all(atoll_local_names, "\\([^()]+\\)"), 
         Atoll = str_remove_all(Atoll, "\\(|\\)")) |> 
  filter(atoll_official == "Gaaf Dhaal Atoll") |> 
  count(island_correct)
```




```{r}
maldives |>
  filter(!is.na(island) & !str_detect(island, "Uninhabited") & indicator != "Population" & population == "Maldivians") |>
  group_by(indicator, island = island_correct, atoll_official, atoll_local_names, population) |> 
  summarise(value = mean(value, na.rm = TRUE), .groups = "drop") |> 
  mutate(value2 = value, 
         indicator2 = indicator) |> 
  write_csv(here("data", "maldives_island_indicator2.csv"))
  
maldives |>
  filter(!is.na(island) & !str_detect(island, "Uninhabited") & 
           population == "Resident Population" & 
           indicator != "Population") |> 
  filter(island == "Kuburudhoo" & indicator == "Inactivity rate (%)")
```


```{r}


```



### Duplicates, old maldives code

```{r}
maldives <- read_excel(here("data", "maldives_duplicates_Cleaned 1.xlsx")) |> 
  janitor::clean_names()



gbv_indicators <- maldives |> 
  count(indicator, sort = TRUE) |>
  # This is where we filtered out the crime data
  filter(n < 43) |> 
  filter(indicator %out% c("Cases Sent for Prosecution", 
                           "Growth Rate ( 2014 to 2022)")) |> 
  pull(indicator)

maldives_normalised <- maldives |> 
  # Remove resident Maldivians 2014
  filter(population %out% c("Resident Maldivians 2014")) |> 
  # cleaning up spelling and recoding NAs
  mutate(population = 
           case_when(
             population == "Resident population" ~ "Resident Population",
             is.na(population) ~ "Provisionally Resident Population", 
             TRUE ~ population
                     )) |> 
  # Replacing NAs in administration with "provisionally administrative islands"
  mutate(administration = 
           ifelse(is.na(administration), 
                  "provisionally Administrative Islands", 
                  administration)) |>
  # Mutating admin level, either admin2 or admin3
  mutate(administration_level = 
           case_when(
             indicator %in% gbv_indicators ~ "admin2",
             TRUE ~ "admin3")) |> 
  group_by(indicator, population) %>% 
  # Mutating a new range column within each population and indicators
  mutate(range01 = range_wna(value)) |> 
  ungroup() 


maldives_normalised |> write_csv(here("data", "maldives_normalised.csv"))


```

Error in the dataset provided 

```{r}
maldives_normalised |> count(administration)

maldives |> filter(indicator %in% gbv_indicators) |> 
  count(population)

maldives_normalised |> count(population)

maldives_normalised |> 
  filter(administration == "Administrative Islands" & 
           administration_level == "admin3") |> 
   count(indicator, population, administration, atoll_official, island, sort = TRUE) 

  duplicates <- maldives |> 
    filter(population %out% c("Resident Maldivians 2014")) |> 
    count(indicator, population, administration, atoll_official, island, sort = TRUE) |> 
    filter(n > 1) |> 
    mutate(duplicate = TRUE)

maldives_duplicates <- maldives |> 
  filter(population %out% c("Resident Maldivians 2014")) |> 
  left_join(
    duplicates |> 
      select(-n), 
    by = c("indicator", "population", "administration", "atoll_official", "island")
  ) |> 
  mutate(duplicate = ifelse(is.na(duplicate), FALSE, duplicate))

maldives_duplicates |> write_csv(here("data", "maldives_duplicates.csv"))
```

```{r}
maldives |> filter(duplicate == TRUE)
```



```{r}
maldives |> 
  
  filter(atoll_official == "Seenu Atoll" & island == "Hithadhoo"& 
           indicator == "Child Dependency Ratio" & 
           population == "Maldivians")
  
  

```


```{r}
maldives |> 
  filter(population != "Resident Maldivians 2014" & 
           !is.na(indicator)) |> 
  mutate(administration = 
           ifelse(is.na(administration), 
                  "provisionally Administrative Islands", 
                  administration)) |>
  mutate(administration_level = 
           case_when(
             indicator %in% exclude_indicators ~ "admin3",
             TRUE ~ "admin2")) |> 
  group_by(indicator, population) %>% 
  mutate(range01 = range_wna(value)) |> 
  ungroup() 
```


```{r}
maldives |> 
  filter(indicator %out% exclude_indicators) |> 
  count(administration)
  glimpse()
```


```{r}
maldives_normalised |> 
  filter(population == "Maldivians") |> 
  filter(indicator %in% c("Population", "Aged-Dependency Ratio")) |>
   pivot_wider(names_from = indicator, 
              values_from = range01)


  filter(!is.na(`Total Population`) & !is.na(`Unemployment rate (%)`))
  select(indicator, island, atoll_official, population, range01) |> 
  
  ggplot(aes(x = `Population`, y = `Unemployment rate (%)`)) + 
  geom_point()
  
maldives_normalised |> 
  filter(indicator %in% c("Unemployment rate (%)", "Population")) |> 
  count(indicator)


maldives |> count(indicator)
  filter(indicator == "Population") |> 
  group_by(island, atoll_official, population) |> 
  summarise(rows = n())
  # filter(indicator %in% c("Unemployment rate (%)", "Population")) |>
  count(indicator)
  
maldives |> count(indicator, population)
```



```{r}
maldives |> 
  filter(indicator == "NEET rate (18-35 years) (%)")
```

## HRI

```{r}
hri <- read_excel(here("data", "human_rights_index.xlsx")) |> clean_names()


hri_long_filtered <- hri |> 
  rename(recommending_body = reccomending_body) %>% 
   mutate_at(vars(countries_concerned, 
                 recommending_body, 
                 recommending_regions, 
                 regions_concerned,
                 themes, 
                 affected_persons, 
                 sdgs, 
                 type), 
            ~ str_replace_all(., "\\- ", "")) |> 
  separate(countries_concerned, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("country", 1:20)) |> 
  pivot_longer(cols = country1:country20, 
               names_to = "ignore1", 
               values_to = "country") |>
  filter(!is.na(country)) |>
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea", 
    country == "Iran (Islamic Republic of)" ~ "Iran", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Republic of Korea" ~ "South Korea", 
    country == "Viet Nam" ~ "Vietnam",
    TRUE ~ country
  )) |> 
  filter(country %in% country_list) |> 
  separate(themes, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("theme", 1:36)) |>
  pivot_longer(cols = theme1:theme36, 
               names_to = "ignore2", 
               values_to = "theme") |>
  filter(!is.na(theme)) |>
  separate(affected_persons, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("affected_persons", 1:18)) |>
  pivot_longer(cols = affected_persons1:affected_persons18, 
               names_to = "ignore3", 
               values_to = "persons_affected") |>
  filter(!is.na(persons_affected))  |> 
  separate(sdgs, sep = "\r\n", 
           remove = TRUE, 
           into = paste0("sdgs", 1:37)) |>
  pivot_longer(cols = sdgs1:sdgs37, 
               names_to = "ignore4", 
               values_to = "sdg") |>
  filter(!is.na(sdg)) |> 
  distinct(ohchr_annotation_id, 
           type, 
           sdg,
           country, 
           theme, 
           persons_affected)

annotation_id_list <- hri_long_filtered |>
  pull(ohchr_annotation_id)

hri_filtered <- hri |> 
    filter(ohchr_annotation_id %in% annotation_id_list)

hri_long_filtered |> 
  write_csv(here("data", "hri_long_filtered.csv"))

hri_filtered |> 
  write_csv(here("data", "hri_filtered.csv"))
```

```{r}
hri |> count(ohchr_annotation_id, sort = TRUE)
```







## Sri Lanka

For the human rights violations dataset, neither the `sub_category` nor the `further_classification`

```{r}

lka_adm2 <- read_excel(here("data", "lka_adminboundaries_tabulardata.xlsx"), 
           sheet = "Admin2") |> 
  clean_names()

irr_mig <- read_excel(here("data", "Irregular Migration.xlsx")) |> 
  clean_names()

hr_violations <- read_excel(here("data", "HR Violations_Consolidated_2021.03.01_CRD.xlsx"), 
                            sheet = "Consolidated") |> 
  clean_names() |> 
  mutate(further_classification = ifelse(
    further_classification %in% c(
      "Alleged intimidation",
      "Counter-Hate Speech",
      "Counter-Terrorism",
      "Custodial deaths",
      "Extrajudicial killings",
      "PTA",
      "Police Shooting in response to custody escape/as a result of ‘encounters’",
      "Police shooting/ Cusotdy escape",
      "Police shooting/ Custody escape",
      "Police shooting/ Prison Riot"
  ), 
  further_classification, 
  sub_category)) |> 
  # This new further_classification column should now be used over sub_category (since that is now more incomplete)
  mutate(further_classification = 
           case_when(
             str_detect(further_classification, "Alleged intimidation|Alleged initimidation") ~ "Alleged intimidation", 
             str_detect(further_classification, 
                        "Custodial|Custodial/encounter deaths|encounters|Police shooting/ Cusotdy escape|Police shooting/ Custody escape|Police shooting/ Prison Riot") ~
               "Custuodial deaths/ Police shootings", 
             str_detect(further_classification, "ICCPR|PTA|Emergency law Arrest") ~ "Abuse of laws", 
             str_detect(further_classification, "Deaths attributed to state actors|Extrajudicial killings") ~ 
               "Extrajudicial killings and state actors", 
             str_detect(further_classification, "Torture/Assault|Alleged assault/torture") ~ "Grevious Bodily Harm",
             str_detect(further_classification, "N/A") ~ NA_character_, 
             TRUE ~ further_classification
             
           )) |> 
  mutate(injured = as.numeric(injured), 
         date = ymd(date_value))

land_issues <- read_excel(here("data", "Land Issues_Consolidated_2021.03.01_CRD.xlsx")) |> 
  clean_names() |> 
  mutate(date = paste0(year, "-", month, "-", day), 
         date = ymd(date)) |>
  rename(description = column5)

hate_speech <- read_excel(here("data", "HS Monitoring database 2024.xlsx")) |> 
  clean_names() |> 
   mutate(rco_primary_category = 
           case_when(str_detect(rco_primary_category, "DIsinformation|disinformation") ~ "Disinformation", 
                     rco_primary_category == "hate speech" ~ "Hate Speech",
                     rco_primary_category == 
                       "violent extremism and/or endorsement of violence" ~ 
                       "Violent Extremism and/or Endorsement of Violence", 
                     rco_primary_category == "Violent extremism and/or endorsement of violence" ~ 
                       "Violent Extremism and/or Endorsement of Violence",
                     rco_primary_category == "harassment" ~ "Harassment", 
                     TRUE ~ rco_primary_category)) |> 
  separate(protected_group, sep = ",", remove = TRUE, into = paste0("protected_group", 1:7)) |> 
  pivot_longer(cols = protected_group1:protected_group7, 
               names_to = "ignore", 
               values_to = "protected_group") |> 
  filter(!is.na(protected_group)) |> 
  select(-ignore) |> 
  naniar::replace_with_na(list(key_message = "NaN", 
                               district_if_sri_lanka = "NaN")) |> 
  mutate(district_if_sri_lanka = ifelse(district_if_sri_lanka == "kandy", "Kandy", district_if_sri_lanka)) |> 
  mutate(date = dmy(paste0(day, "-", month, "-", date_year))) |> 
  mutate(engagement = parse_number(engagement), 
         protected_group = str_trim(protected_group)) |> 
  mutate(protected_group = case_when(
    str_detect(protected_group, "LGBT") ~ "LGBTQI",
    str_detect(protected_group, "Minor") ~ "Minors", 
    str_detect(protected_group, "Other") ~ "Other", 
    protected_group == "Politicians" ~ "Political Actors",
    protected_group == "State Actors" ~ "Political Actors", 
    str_detect(protected_group, "Women") ~ "Women", 
    str_detect(protected_group, "Activist") ~ "Activists",
    protected_group == "nan" ~ NA_character_,
    TRUE ~ protected_group
  ))

religious <- read_excel(here("data", "Religious Violence Data.xlsx")) |>
  clean_names() |> 
  rename(id = x1) |> 
  slice(-1) |> 
  separate(type_of_incident, sep = ",", remove = TRUE, into = paste0("type_of_incident", 1:5)) |> 
  pivot_longer(cols = type_of_incident1:type_of_incident5, 
               names_to = "ignore", 
               values_to = "type_of_incident") |> 
  filter(!is.na(type_of_incident)) |> 
  select(-ignore) |> 
  separate(primary_targets, sep = ",", remove = TRUE, into = paste0("primary_target", 1:3)) |> 
  pivot_longer(cols = primary_target1:primary_target3, 
               names_to = "ignore", 
               values_to = "primary_target") |> 
  filter(!is.na(primary_target)) |> 
  select(-ignore) |> 
  mutate(district = case_when(
    district == "Kilinochchi\r\n" ~ "Kilinochchi", 
    TRUE ~ district
  )) |> 
  mutate(primary_target = case_when(
    str_detect(primary_target, "Place of worship|place of worship") ~ "Place of worship", 
    str_detect(primary_target, "Institutions|Institution") ~ "Institutions", 
    str_detect(primary_target, "clergy") ~ "Clergy", 
    str_detect(primary_target, "Wider community") ~ "Wider community", 
    str_detect(primary_target, "officials") ~ "Officials", 
    TRUE ~ primary_target
    
  )) |> 
  mutate(id = as.numeric(id)) |> 
  separate(perpetrators_religious_affiliation, sep = ",", remove = TRUE, into = paste0("perp_religion", 1:2)) |> 
  pivot_longer(cols = perp_religion1:perp_religion2, 
               names_to = "ignore", 
               values_to = "perp_religion") |> 
  filter(!is.na(perp_religion)) |>
  select(-ignore) |> 
  mutate(perp_religion = case_when(
    perp_religion == "Unaffiliated or unidentified individual or group" ~ "Unaffiliated", 
    perp_religion == "Unknown" ~ "Unknown or unverifiable", 
    TRUE ~ perp_religion
  )) |> 
  separate(key_perpetrators, sep = ",", remove = TRUE, into = paste0("key_perpetrators", 1:4)) |> 
  pivot_longer(cols = key_perpetrators1:key_perpetrators4, 
               names_to = "ignore", 
               values_to = "key_perpetrators") |> 
  filter(!is.na(key_perpetrators)) |>
  select(-ignore) |> 
  mutate(key_perpetrators = trimws(str_remove_all(key_perpetrators, "\\\r\n"))) |> 
  mutate(key_perpetrators = case_when(
    str_detect(key_perpetrators, "social movement") ~ "Political/social movement or politician",
    TRUE ~ key_perpetrators
  )) |> 
  distinct(id, reference_code, date, location, 
           district, divisional_secretariat, 
           brief_of_incident, police_action, 
           government_officials_action, 
           legality_of_place_of_worship, 
           x15, type_of_incident, 
           primary_target,
           perp_religion, key_perpetrators)

remittances <- read_excel(here("data", "flow_of_foreign_remittances_20230214.xlsx"), 
           skip = 3) |> 
  rename(month = `...1`) |> 
  slice(1:12) |> 
  mutate(`2019` = as.numeric(`2019`)) |> 
  pivot_longer(cols = `2015`:`2022`, 
               names_to = "year", 
               values_to = "usd_mln") |> 
  mutate(date = dmy(paste0("01-", month, "-", year)))

tourist_arrivals <- read_excel(here("data", "20220630_Tourist Arrivals.xlsx")) |> 
  rename(year = `...3`)

lka_adm2_pop <- read_csv(here("data", "lka_admpop_adm2_2023.csv")) |> 
  clean_names() |> 
  distinct(adm2_name, adm2_pcode, f_tl, m_tl, t_tl)


```

```{r}
read_excel(here("data", "hate_speech_keywords_N.xlsx")) |> 
  mutate(estimated_engagement = 
           case_when(Engagement == "<100" ~ 50, 
                     Engagement == "100-1000" ~ 500, 
                     Engagement == "1000-10000" ~ 5000)) |> 
  writexl::write_xlsx(here("data", "hate_speech_keywords_N_alt.xlsx"))
  count(Engagement)
```


```{r}
religious 

separate(primary_targets, sep = ",", remove = TRUE, into = paste0("primary_target", 1:3)) |> 
  pivot_longer(cols = primary_target1:primary_target3, 
               names_to = "ignore", 
               values_to = "primary_target") |> 
  filter(!is.na(primary_target)) |> 
  select(-ignore) |> 
```



```{r}
religious |> 
  distinct(id, reference_code, date, location, 
           district, divisional_secretariat, brief_of_incident, 
           key_perpetrators, perpetrators_religious_affiliation)
  count(police_action)
  glimpse()
  
religious  |> 
  count(key_perpetrators)
```



```{r}

tourist <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "Tourist") |> 
  select(1:4) |> 
  clean_names() |> 
  mutate(date = ymd(date)) |> 
  select(date, visitor_arrivals) |> 
  rename(value = visitor_arrivals) |> 
  mutate(indicator = "Monthly Visitor arrivals")

trade <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "Trade") |> 
  mutate(date = ymd(Month)) |> 
  select(-Month) |> 
  pivot_longer(cols = `Imports (USD)`:`Exports (USD)`, 
                      names_to = "indicator", 
                      values_to = "value") |> 
  mutate(indicator = str_replace(indicator, "USD", "USD mln")) |> 
  filter(!is.na(value)) 

remittances <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "Remittances", 
           skip = 1) |> 
  clean_names() |> 
  select(1:2) |> 
  mutate(date = ymd(month)) |> 
  select(-month) |> 
  mutate(indicator = "Total remittances (USD mln)") |> 
  rename(value = total_remittances_usd)

public_finance <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "Public finance ") |> 
  rename(date = `...1`) |> 
  mutate(date = ymd(date)) |> 
  pivot_longer(cols = `Government Revenue & Grants: Revenue: Tax`:`Share of GDP Government Expenditure & LR`, 
               names_to = "indicator", 
               values_to = "value") |> 
  filter(!is.na(value)) 

unemployment <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "Unemployment") |> 
  rename(date = Date, 
         `Unemployment rate (quarterly)` = `Unemployment Rate: Quarterly: sa: Sri Lanka`, 
         `Labour force participation rate (quarterly)` = `Labour Force Participation Rate: Quarterly: Sri Lanka`) |> 
  mutate(date = ymd(date)) |> 
  pivot_longer(cols = -date, 
               names_to = "indicator", 
               values_to = "value")

pmi <- read_excel(here("data", "Economic data final v.xlsx"), 
           sheet = "PMI") |> 
  rename(date = Date) |> 
  mutate(date = ymd(date)) |>
  pivot_longer(cols = -date, 
               names_to = "indicator", 
               values_to = "value")

fx <- read_excel(here("data", "lka_fx_rate.xlsx")) |> 
  mutate(date = ymd(date)) |>
  pivot_longer(cols = -date, 
               names_to = "indicator", 
               values_to = "value") |> 
  filter(!is.na(value)) |>
  mutate(indicator = ifelse(
    str_detect(indicator, "Foreign Currency Reserves"), 
    "Foreign Currency Reserves (USD mln)",
    "Spot FX Rate"
  )) 
  

lka_econ <- rbind(
  tourist, 
  trade, 
  remittances, 
  public_finance, 
  unemployment,
  pmi, 
  fx
)
```

```{r}
glimpse(hr_violations)


    

```
```{r}
glimpse(land_issues)
```

```{r}
crime <- read_excel(here("data", "Crime by District.xlsx"), 
           sheet = "Crime Data by District") |> 
  select(-Total) |> 
  pivot_longer(cols = c(`Abduction/Kidnapping`:`Obstructions to Police Officers`), 
               names_to = "crime", 
               values_to = "count") |> 
  filter(!is.na(count)) |> 
  clean_names() |> 
  rename(district = district_name_cleaned)


  glimpse()

land_issues |> 
  count(classification)
  glimpse()
  
crime |> 
  group_by(year, crime) |> 
  summarise(count = sum(count)) |> 
  arrange(desc(count))
```

```{r}
religious |> 
  distinct(id, reference_code, date, location, 
           district, divisional_secretariat, 
           brief_of_incident, police_action, 
           government_officials_action, 
           legality_of_place_of_worship, 
           x15, type_of_incident, 
           primary_target,
           perp_religion, key_perpetrators) |> 
  
  glimpse()

religious |> 
  mutate(type_of_incident = trimws(type_of_incident)) |> 
  mutate(type_of_incident = case_when(
    str_detect(type_of_incident, "Physical violence|Physical Violence") ~ "Physical Violence", 
    type_of_incident == "Hate campaign or propaganda" ~ "Hate Speech/Campaign", 
    type_of_incident == "Property damage or destruction" ~ "Property Damage", 
    type_of_incident == "intimidation or coercion" ~ "Intimidation or coercion", 
    TRUE ~ type_of_incident
  )) |> 
  
  count(type_of_incident)
```



### Sri Lanka write

```{r}
hate_speech |> writexl::write_xlsx(here("data", "hate_speech.xlsx"))

religious |> writexl::write_xlsx(here("data", "religious_violence.xlsx"))

lka_adm2 |> write_csv(here("data", "lka_adm2.csv"))

lka_econ |> writexl::write_xlsx(here("data", "lka_econ.xlsx"))

hr_violations |> writexl::write_xlsx(here("data", "hr_violations.xlsx"))

land_issues |> writexl::write_xlsx(here("data", "land_issues.xlsx"))

crime |> writexl::write_xlsx(here("data", "crime.xlsx"))

```

```{r}
hate_speech  |>
  mutate(ethnic_religious = paste0(ethnic_group, ",", religious_group), 
         ethnic_religious = str_replace_all(ethnic_religious, 
                                            "\\,NA|NA,|\\,nan|nan,", 
                                            ""), 
         ethnic_religious = str_trim(ethnic_religious)) |> 
  naniar::replace_with_na(list(
    ethnic_religious = "nan"
  )) |> 
   naniar::replace_with_na(list(
    ethnic_religious = "NA"
  )) |>
  count(ethnic_religious, sort = TRUE)

hr_violations |> glimpse()

```


```{r}
religious |> count(type_of_incident, primary_target, sort = TRUE)

religious |> filter(is.na(primary_target))

religious |> count(primary_target)


```



```{r}

hate_speech |> 
  group_by(date_year, rco_primary_category) |> 
  summarise(count = n_distinct(entry_id)) |> 
  ggplot(aes(x = date_year, y = count)) + 
  geom_line(aes(colour = rco_primary_category))

```

```{r}
 
  count(admin2name_en)
```




## Bangladesh

```{r}


bangladesh <- read_csv(here("data", "1900-01-01-2024-10-24-Bangladesh.csv")) |> 
  acled_cleaning()
```


```{r}
acled_cleaning <- function(tbl) {
  
  tbl |> 
    mutate(event_date = as.Date(event_date, "%d %B %Y")) |> 
    mutate(fatalities = as.numeric(fatalities)) |> 
    mutate(
      inter_type = interaction,
      inter_type = recode_factor(
        inter_type,
        `10` = "SOLE MILITARY ACTION",
        `11` = "MILITARY VERSUS MILITARY",
        `12` = "MILITARY VERSUS REBELS",
        `13` = "MILITARY VERSUS POLITICAL MILITIA",
        `14` = "MILITARY VERSUS COMMUNAL MILITIA",
        `15` = "MILITARY VERSUS RIOTERS",
        `16` = "MILITARY VERSUS PROTESTERS",
        `17` = "MILITARY VERSUS CIVILIANS",
        `18` = "MILITARY VERSUS OTHER",
        `20` = "SOLE REBEL ACTION",
        `22` = "REBELS VERSUS REBELS",
        `23` = "REBELS VERSUS POLITICAL MILIITA ",
        `24` = "REBELS VERSUS COMMUNAL MILITIA",
        `25` = "REBELS VERSUS RIOTERS",
        `26` = "REBELS VERSUS PROTESTERS ",
        `27` = "REBELS VERSUS CIVILIANS",
        `28` = "REBELS VERSUS OTHERS",
        `30` = "SOLE POLITICAL MILITIA ACTION",
        `33` = "POLITICAL MILITIA VERSUS POLITICAL MILITIA",
        `34` = "POLITICAL MILITIA VERSUS COMMUNAL	MILITIA",
        `35` = "POLITICAL MILITIA VERSUS RIOTERS",
        `36` = "POLITICAL MILITIA VERSUS PROTESTERS",
        `37` = "POLITICAL MILITIA VERSUS CIVILIANS",
        `38` = "POLITICAL MILITIA VERSUS OTHERS",
        `40` = "SOLE COMMUNAL MILITIA ACTION",
        `44` = "COMMUNAL MILITIA VERSUS COMMUNAL MILITIA",
        `45` = "COMMUNAL MILITIA VERSUS RIOTERS",
        `46` = "COMMUNAL MILITIA VERSUS PROTESTERS ",
        `47` = "COMMUNAL MILITIA VERSUS CIVILIANS",
        `48` = "COMMUNAL MILITIA VERSUS OTHER",
        `50` = "SOLE RIOTER ACTION",
        `55` = "RIOTERS VERSUS RIOTERS",
        `56` = "RIOTERS VERSUS PROTESTERS",
        `57` = "RIOTERS VERSUS CIVILIANS",
        `58` = "RIOTERS VERSUS OTHERS",
        `60` = "SOLE PROTESTER ACTION",
        `66` = "PROTESTERS VERSUS PROTESTERS",
        `67` = "PROTESTERS VERSUS CIVILIANS",
        `68` = "PROTESTERS VERSUS OTHER",
        `78` = "OTHER ACTOR VERSUS CIVILIANS",
        `70` = "SOLE CIVILIAN ACTION",
        `80` = "SOLE OTHER ACTION"
      ),
      inter_type = 
        tolower(str_trim(str_replace_all(inter_type, "[\\r\\n\\t]+", ""))))
}
```


```{r}

bgd_food <- read_csv(here("data", "wfp_food_prices_bgd.csv")) |> 
  slice(2:14179)


```

```{r}

caru <- read_excel(here("data", "CARU_Security_incident_2023.xlsx")) |> 
  clean_names() |> 
  mutate(sub_category = str_remove_all(sub_category, 
                                       "Insecurity-|Movement-|Violece-|Violence-|Death-|Drug-")) |> 
  mutate(nationality_of_perpetrator = case_when(
    nationality_of_perpetrator %in% c("Bangaldeshi", "Bangladesh", "Bangladesi", "Bangldeshi") ~ "Bangladeshi", 
    str_detect(nationality_of_perpetrator, "NAP|Nap") ~ "NAp", 
    str_detect(nationality_of_perpetrator, "NAV|Nav") ~ "NAv", 
    nationality_of_perpetrator == "Bangladeshi and Rohingya" ~ "Rohingya and Bangladeshi", 
    TRUE ~ nationality_of_perpetrator
  )) |> 
  naniar::replace_with_na(list(nationality_of_perpetrator = "Unknown")) |> 
  mutate(date = ymd(date)) %>% 
  mutate_at(vars(c(year, week, longitude, latitude, time)), 
            ~ as.numeric(.)) |> 
  filter(!is.na(year) & !is.na(longitude) & !is.na(latitude)) |>
  replace_na(list(
    time = 0, 
    death_bd_f = 0
  )) |> 
  select(-column2)
```


```{r}
read_excel(here("data", "INFORM_Sub-national Risk Index for Bangladesh_ 2022_Admin Level-2_V1.xlsx")) |> 
  pivot_longer(cols = c(`Earthquake Risk`:`Rank-Risk`)) |> 
  
  glimpse()

caru 

```

```{r}
caru |> skimr::skim()
```



### Bangladesh write 





```{r}
bangladesh |>
  write_csv(here("data", "bangladesh_acled.csv"))

caru |> 
  writexl::write_xlsx(here("data", "caru_bangladesh.xlsx"))

caru |> write_csv(here("data", "caru.csv"))

bgd_food |> 
  writexl::write_xlsx(here("data", "bgd_food_prices.xlsx"))

```



