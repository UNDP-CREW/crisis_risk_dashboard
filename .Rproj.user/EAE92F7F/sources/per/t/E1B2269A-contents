---
title: "Crisis risk dashboard"
author: "Sean Ng"
date: "13 June 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
---


```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
                      fig.width = 9.5)

library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(countrycode)
library(viridis)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

show_col(viridis_pal(option = "cividis")(8))

country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "India", "Indonesia", 
                  "Iran", "North Korea", "South Korea", "Laos", 
                  "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "Pakistan", "Papua New Guinea", "Philippines", 
                  "Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste", 
                  "Vanuatu", "Vietnam")

world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

population_estimates <- read_csv(here("data", "population_estimates.csv"))

```

# Data 

## Net freedom and world freedom

```{r data}


net_freedom <- read_xlsx(here("data", "Freedom on the net 2023-11.xlsx")) |> 
  janitor::clean_names() |> 
  filter(country %in% country_list) |> 
  rename(year = edition)

world_freedom <- read_xlsx(here("data", "Freedom In the World 2024-13.xlsx"), 
                           sheet = 2, 
                           skip = 1) |> 
  janitor::clean_names() |> 
  rename(country = country_territory, 
         year = edition) |> 
  filter(country %in% country_list)


  
```


## Special procedures 

```{r}
special_procedures <- read_xlsx(here("data", "Special Procedurces Communications Data.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(vulnerable_groups = 
           ifelse(
             str_detect(mandates, 
                        "minority|women|indigenous|migrants|myanmar|cambodia|slavery|persons|children|sexual orientation|girls|older|African|disability|Korea|racism|trafficking"), 
             1, 0),
         women_and_girls = 
           ifelse(str_detect(mandates, "Women|women|woman|Woman|Girl|girl"), 
                  1, 0), 
         human_rights_defenders = 
           ifelse(str_detect(mandates, "Lawyer|lawyer|Judge|judge|Defender|defender"), 
                  1, 0)) |> 
  separate(mandates, sep = "\r\n", remove = TRUE, into = paste0("mandate", 1:20)) |> 
  pivot_longer(cols = mandate1:mandate20, 
               names_to = "ignore", 
               values_to = "mandate") |> 
  filter(!is.na(mandate)) |> 
  select(-ignore) |> 
  rename(alleged_victims = nb_of_alleged_victims) |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  mutate(mandate = str_to_lower(mandate)) 
```

```{r}
special_procedures_top5 <- special_procedures |>
  filter(country %in% country_list) |> 
  group_by(country, mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  arrange(desc(count)) |> 
  slice(1:5) |> 
  mutate(mandate = str_to_title(mandate)) |> 
  ungroup()

special_procedures_top5 |> 
  write_csv(here("data", "special_procedures_top5.csv"))

special_procedures_order <- special_procedures_top5 |> 
  count(country, wt = count, sort = TRUE) |> 
  slice(1:12) |> pull(country)

special_procedures_top5 |> 
  filter(country %in% special_procedures_order) |>
  ggplot(aes(x = count, 
             y = mandate)) + 
  geom_col() + 
  facet_wrap(~ country, 
             scales = "free")
```

```{r}
special_procedures_filtered <- special_procedures |> 
  filter(country %in% country_list)

special_procedures_filtered |> write_csv(here("data", "special_procedures_filtered.csv"))
```


```{r}
special_procedures_filtered |> 
  left_join(
    population_estimates |> 
      filter(country %in% country_list & 
               year == 2023) |> 
      select(country, population),
    by = "country"
  ) 



population_estimates |> 
  filter(country %in% country_list) |> 
  filter(year == 2023)
  
```


```{r}
special_procedures |> 
  filter(country %in% country_list) |> 
  filter(vulnerable_groups > 0) |> 
  group_by(mandate) |> 
  summarise(count = n_distinct(ref_no)) |> 
  arrange(desc(count))
```



```{r}
country_list

special_procedures |> 
  filter(un_region == "Asia-Pacific Group" | 
           ohchr_region == "Asia Pacific") |> 
  mutate(country = case_when(
    country == "Democratic People's Republic of Korea" ~ "North Korea",
    country == "Iran (Islamic Republic of)" ~ "Iran (Islamic Republic of)", 
    country == "Lao People's Democratic Republic" ~ "Laos", 
    country == "Viet Nam" ~ "Vietnam", 
    country == "Republic of Korea" ~ "South Korea", 
    TRUE ~ country)) |> 
  filter(country %in% country_list) |> 
  count(country)
```

## World freedom

```{r}
world_freedom_filtered <- world_freedom |>
  select(country, 
         year, status, 
         electoral_process = a, 
         pluralism_participation = b, 
         functioning_government = c, 
         freedom_of_expression = d, 
         right_to_assembly = e, 
         rule_of_law = f, 
         personal_autonomy = g, 
         political_rights = pr, 
         civil_liberties = cl, 
         total) |> 
  pivot_longer(cols = c(electoral_process:total),
               names_to = "sub_indicator", 
               values_to = "score") |> 
  filter(!is.na(score)) |> 
  mutate(sub_indicator_category = 
           case_when(
             sub_indicator %in% c("electoral_process",
                                  "pluralism_participation",
                                  "functioning_government") ~ "political_rights", 
            sub_indicator %in% c("freedom_of_expression",
                                 "right_to_assembly", 
                                 "rule_of_law", 
                                 "personal_autonomy") ~ "civil_liberties", 
            TRUE ~ "aggregation"
           )) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) 

world_freedom_filtered |> 
  write_csv(here("data", "world_freedom_filtered.csv"))
```


```{r}
world_freedom_filtered |> 
  filter(year == 2024 & 
           sub_indicator == "total") |> 
  arrange(desc(score))
```

## Net freedom

```{r}
net_freedom_map <- net_freedom |> 
  filter(country %in% country_list) |> 
  select(country, year, total_country_score) |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  mutate(freedom_status = case_when(
    total_country_score <= 39 ~ "Not free",
    total_country_score > 39 & total_country_score <= 69 ~ "Partly free",
    total_country_score > 39 ~ "Free"))

net_freedom_map |> write_csv(here("data", "net_freedom_map.csv"))

net_freedom_map |> 
  left_join(world_shape, 
             by = c("country_iso" = "iso3")) |> 
  st_as_sf() |> 
  ggplot() + 
  geom_sf(size = .1, colour = "grey", 
          aes(fill = total_country_score)) 
  coord_sf(xlim = c("37", "135"), 
                  ylim = c("-35", "60"),lims_method = "geometry_bbox")
  

```


```{r}
net_freedom_charts <- net_freedom |> 
  filter(country %in% country_list) |> 
  pivot_longer(cols = a1:total_country_score, 
               names_to = "sub_indicator", 
               values_to = "score") |> 
  mutate(sub_indicator_text =
           case_when(
             sub_indicator == "a1" ~ "Infrastructural limitations", 
             sub_indicator == "a2" ~ "Internet accesibility",
             sub_indicator == "a3" ~ "Government restrictions", 
             sub_indicator == "a4" ~ "Service provider diversity", 
             sub_indicator == "a5" ~ "Regulatory failure", 
             sub_indicator == "b1" ~ "Blocked content", 
             sub_indicator == "b2" ~ "Forced content deletion", 
             sub_indicator == "b3" ~ "Opaque, unacccountable procedures", 
             sub_indicator == "b4" ~ "Self-censorship", 
             sub_indicator == "b5" ~ "Information control and manipulation", 
             sub_indicator == "b6" ~ "Constraints on publishing", 
             sub_indicator == "b7" ~ "Lack diversity and reliability", 
             sub_indicator == "b8" ~ "Constraints on communities", 
             sub_indicator == "c1" ~ "Legal protections", 
             sub_indicator == "c2" ~ "Criminalised online activities",  
             sub_indicator == "c3" ~ "Individuals penalised", 
             sub_indicator == "c4" ~ "Restricted anonymous communication", 
             sub_indicator == "c5" ~ "State infringement of privacy", 
             sub_indicator == "c6" ~ "Data monitoring and retention", 
             sub_indicator == "c7" ~ "Extralegal intimidation", 
             sub_indicator == "c8" ~ "Cyberattacks", 
             TRUE ~ sub_indicator
           )) |> 
  mutate(sub_index_group = 
           case_when(
             str_detect(sub_indicator, "a[0-9]") ~ "A. Obstructions to access", 
             str_detect(sub_indicator, "b[0-9]") ~ "B. Limits on content", 
             str_detect(sub_indicator, "c[0-9]") ~ "C. Violation of user rights", 
             TRUE ~ "aggregation"
           )) |> 
  filter(!is.na(score))
  
net_freedom_charts |> write_csv(here("data", "net_freedom_charts.csv"))

net_freedom_charts |> filter(!is.numeric(score))

net_freedom_charts |> filter(is.na(score))
```











## Displacement

```{r}
displacement <- read_csv(here("data", "displacement_data.csv")) |> 
  janitor::clean_names() |> 
  mutate(country_iso = countrycode(country, 
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  filter(year > 2007) |>
  pivot_wider(names_from = indicator_sub_type, 
              values_from = sum_of_value) |> 
  janitor::clean_names() |>
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0)) |> 
  mutate(total_displacement = 
           disaster_new_displacement + 
           conflict_stock_displacement +
           conflict_new_displacement) |> 
  left_join(population_estimates |> 
              filter(year %in% c(2017, 2018, 2019)), 
            by = c("country", "year")) |>
  mutate(disaster_per_100k = disaster_new_displacement / population * 100000, 
         conflict_per_100k = (conflict_stock_displacement +
                                  conflict_new_displacement) / population * 100000, 
         total_displacement_100k = total_displacement / population * 100000, 
         conflict_subtotal_displacement = 
           conflict_stock_displacement + conflict_new_displacement)  %>%
  mutate_at(vars(disaster_per_100k,
                 conflict_per_100k, 
                 total_displacement_100k), 
            ~ round(., digits = 6)) |> 
  replace_na(list(disaster_new_displacement = 0, 
                  conflict_stock_displacement = 0, 
                  conflict_new_displacement = 0, 
                  population = 0, 
                  disaster_per_100k = 0, 
                  conflict_per_100k = 0, 
                  total_displacement = 0, 
                  total_displacement_100k = 0, 
                  conflict_subtotal_displacement = 0)) 

displacement |> write_csv(here("data", "displacement_per_capita.csv"))

```

```{r}
displacement |> filter(!is.na(conflict_per_100k))

displacement |> filter(year == 2019)

displacement |> filter()
```





## Human rights defenders

```{r}

hrd <- read_csv(here("data", "Asia Forum HRD Data(Asia Forum HRD Data).csv")) |> 
  janitor::clean_names()
```

```{r}
hrd 
```


```{r}



hrd_violation_chart <- hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  separate(violation, sep = "\\|", remove = FALSE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) |>
  group_by(violation_long, country) |> 
  summarise(event_count = n_distinct(serial_number), 
            average_impact = mean(impact_of_event, na.rm = TRUE), 
            .groups = "drop")  
  write_csv(here("data", "hrd_violation_chart.csv"))
  

hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  separate(violation, sep = "\\|", remove = FALSE, 
           into = paste0("violation", 1:7)) |> 
  pivot_longer(cols = violation1:violation7,
               names_to = "ignore",
               values_to = "violation_long") |> 
  filter(!is.na(violation_long)) |>
  group_by(violation_long, country) |>
```


```{r}
hrd |> 
  filter(str_detect(date_added, "2023")) |> 
  filter(str_detect(rights_concerned, "Offline")) |> 
  sample_n(5) |> 
  pull(rights_concerned)
```


```{r}
hrd |> 
  filter(str_detect(date_added, "2023")) |> 
  separate(hrd, sep = "\\|", remove = FALSE, 
           into = paste0("hrd", 1:4)) |> 
  pivot_longer(cols = hrd1:hrd4,
               names_to = "ignore",
               values_to = "hrd_long") |> 
  filter(!is.na(hrd_long)) |> 
  group_by(hrd_long) |> 
  summarise(
    event_count = n_distinct(serial_number), 
    total_impact = sum(impact_of_event, na.rm = TRUE),
    average_impact = mean(impact_of_event, na.rm = TRUE), 
    .groups = "drop") |> 
  write_csv(here("data", "hrd_victims_chart.csv"))
```

```{r}
hrd |>
  filter(str_detect(date_added, "2023")) |> 
  separate(rights_concerned, sep = "\\|", remove = FALSE, 
           into = paste0("rights", 1:7)) |>
  pivot_longer(cols = rights1:rights7, 
               names_to = "ignore", 
               values_to = "rights_long") |> 
  filter(!is.na(rights_long) & 
           rights_long %out% c("Offline", "Online")) |> 
  select(serial_number,
         country,
         title, 
         date_added,
         event_description, 
         rights_long) |> 
  write_csv(here("data", "hrd_rights.csv"))
    
```


```{r}
hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |>
  filter(str_detect(date_added, "2023")) |>
  group_by(country, country_iso) |> 
  summarise(count = n_distinct(serial_number), 
            impact_sum = sum(impact_of_event, na.rm = TRUE), 
            .groups = "drop") |> 
  filter(!is.na(impact_sum)) |> 
  write_csv(here("data", "hrd_text_and_map.csv"))
```





```{r}

hrd |> 
  mutate(country_iso = countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |>
  filter(str_detect(date_added, "2023")) |> 
  summarise(n_distinct(serial_number))
 
```



## Migration 

```{r}
aggregation_list <- c("AFRICA",
"ASIA",
"Central and Southern Asia",
"Central America",
"Central Asia",
"EUROPE",			
"Eastern Africa",	
"Eastern Asia",	
"Eastern Europe",	
"Eastern and South-Eastern Asia",
"High-income countries",
"LATIN AMERICA AND THE CARIBBEAN",
"Land-locked Developing Countries (LLDC)",	
"Latin America and the Caribbean",
"Least developed countries",
"Less developed regions",		
"Less developed regions, excluding China",
"Less developed regions, excluding least developed countries",
"Low-income countries",		
"Lower-middle-income countries",
"Middle-income countries",
"Middle Africa",
"NORTHERN AMERICA",
"Northern Africa",		
"Northern Africa and Western Asia",		
"Northern Europe",
"OCEANIA",
"Oceania (excluding Australia and New Zealand)",
"Small island developing States (SIDS)",
"Sub-Saharan Africa",
"Upper-middle-income countries",
"Western Africa",		
"Western Asia",		
"Western Europe",			
"Western Sahara",
"WORLD", 
"Australia and New Zealand", 
"Europe and Northern America", 
"Developed regions", 
"South-Eastern Asia", 
"Southern Asia", 
"Southern Europe")
```


```{r}


migrant <- read_excel(here("data", "undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx"), 
           sheet = 2, 
           skip = 8) |> 
  janitor::clean_names() |>
  pivot_longer(cols = 8:28, 
               names_to = "name", 
               values_to = "value") |> 
  mutate(name = str_replace(name, "x", ""))|> 
  mutate(sex = case_when(
    name %in% c("1990_8", "1995_9", "2000_10", "2005_11", 
                "2010_12", "2015_13", "2020_14") ~ "total", 
    name %in% c("1990_15", "1995_16", "2000_17", "2005_18", 
                "2010_19", "2015_20", "2020_21") ~ "male", 
    name %in% c("1990_22", "1995_23", "2000_24", "2005_25", 
                "2010_26", "2015_27", "2020_28") ~ "male",
    TRUE ~ "wrong"
  )) |> 
  mutate(year = as.numeric(str_sub(name, start = 1L, end = 4L))) |>
  rename(area_of_destination = region_development_group_country_or_area_of_destination, 
         area_of_origin = region_development_group_country_or_area_of_origin) %>%
  mutate_at(vars(area_of_destination, area_of_origin), 
            .funs = ~str_replace_all(., "\\*", "")) |> 
  mutate(aggregation = ifelse(
    area_of_origin %in% aggregation_list | 
      area_of_destination %in% aggregation_list, 
    "yes", "no"
  )) %>% 
  mutate_at(vars(area_of_destination, 
                 area_of_origin), 
            .funs = ~case_when(
                . == "China, Hong Kong SAR" ~ "Hong Kong", 
                . == "Dem. People's Republic of Korea" ~ "North Korea", 
                . == "Iran (Islamic Republic of)" ~ "Iran", 
                . == "Lao People's Democratic Republic" ~ "Laos", 
                . == "Republic of Korea" ~ "South Korea",
                . == "Viet Nam" ~ "Vietnam", 
                TRUE ~ .
              ))
  
```




```{r}
migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total") |> 
  group_by(area_of_origin, area_of_destination, year) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(names_from = "year", 
              values_from = "migrants", 
              values_fill = 0, 
              names_prefix = "year_") |> 
  mutate(increase_1990 = year_2020 - year_1990, 
         increase_1990_pc = increase_1990 / year_1990, 
         increase_2010 = year_2020 - year_2010, 
         increase_2010_pc = increase_2010 / year_2010) %>% 
  mutate_at(vars(increase_1990_pc, increase_2010_pc), 
            .funs = ~ifelse(is.infinite(.), 1, .)) |> 
  arrange(desc(increase_2010))
```

```{r}
migrant  |>
  filter(aggregation == "no") |> 
  filter(area_of_destination %in% country_list | 
           area_of_origin %in% country_list) |> 
  filter(value != 0 & sex == "total" & year == 2020) |> 
  group_by(area_of_origin, area_of_destination, year) |> 
  summarise(migrants = sum(value, na.rm = TRUE), .groups = "drop") |> 
  group_by(area_of_destination) |> 
  summarise(migrants = sum(migrants, na.rm = TRUE)) |> 
  arrange(desc(migrants))
```




```{r}
migrant |> 
```














